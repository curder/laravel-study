import{_ as s,c as i,o as a,a2 as e}from"./chunks/framework.2-334A9N.js";const p="/laravel-study/assets/laravel10-compare-laravel11-config.Vk0mi0VJ.jpg",y=JSON.parse('{"title":"Laravel 11","description":"","frontmatter":{},"headers":[],"relativePath":"others/whats-new-in-laravel/11.md","filePath":"others/whats-new-in-laravel/11.md","lastUpdated":1710302244000}'),l={name:"others/whats-new-in-laravel/11.md"},n=e('<h1 id="laravel-11" tabindex="-1">Laravel 11 <a class="header-anchor" href="#laravel-11" aria-label="Permalink to &quot;Laravel 11&quot;">​</a></h1><p><a href="https://github.com/laravel/laravel/tree/11.x" target="_blank" rel="noreferrer">Laravel 11</a> 现已发布，包括最低 PHP v8.2、新的 Laravel Reverb 包、简化的目录结构等等...</p><h2 id="简化目录结构" tabindex="-1">简化目录结构 <a class="header-anchor" href="#简化目录结构" aria-label="Permalink to &quot;简化目录结构&quot;">​</a></h2><h3 id="配置文件-config" tabindex="-1">配置文件 config <a class="header-anchor" href="#配置文件-config" aria-label="Permalink to &quot;配置文件 config&quot;">​</a></h3><p>Laravel 项目默认的配置文件在 <code>config</code> 目录下，可以看到相比 Laravel 10 的项目配置文件，Laravel 11 移除了部分默认的配置文件。</p><details class="details custom-block"><summary>查看 <code>config</code> 默认配置差异</summary><p><img src="'+p+`" alt=""></p></details><p>如果需要随时可以通过 <code>config:publish</code> 命令重新发布。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发布 broadcasting 配置文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> artisan</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">publish</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> broadcasting</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 发布 view 配置文件 </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> artisan</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">publish</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> view</span></span></code></pre></div><h3 id="服务提供者-providers" tabindex="-1">服务提供者 Providers <a class="header-anchor" href="#服务提供者-providers" aria-label="Permalink to &quot;服务提供者 Providers&quot;">​</a></h3><p>在 <a href="https://github.com/laravel/laravel/blob/10.x/config/app.php#L158" target="_blank" rel="noreferrer">Laravel 10</a> 中可以在 <code>config/app.php</code> 中的数组配置中注册自定义的服务提供者。</p><p>而 <a href="https://github.com/laravel/laravel/blob/11.x/config/app.php" target="_blank" rel="noreferrer">Laravel 11</a> 中 <code>config/app.php</code> 中并没有自定义服务提供者的配置项。</p><div class="tip custom-block github-alert"><p class="custom-block-title">提示</p><p><strong>默认情况下，Laravel 11 中通过 <code>make:provider</code> 命令创建的服务提供者文件自动加载，而无需手动进行配置。</strong></p><p>因为 <a href="https://github.com/laravel/laravel/blob/11.x/bootstrap/providers.php" target="_blank" rel="noreferrer">Laravel 11</a> 中的服务器提供者的配置文件在 <code>bootstrap/providers.php</code> 中以数组的形式返回。</p></div><p>可以通过下面的流程来检验上面的说法：</p><ol><li><p>创建自定义服务提供者</p><p>通过命令行创建一个服务提供者，并通过运行一个命令来触发它。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:provider</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TestingServiceProvider</span></span></code></pre></div></li><li><p>添加代码逻辑</p><p>修改 <code>app/Providers/TestingServiceProvider.php</code> 文件，添加以下代码：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    dd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hi there&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>运行命令</p><p>最后，在命令行中运行命令 <code>php artisan inspire</code> 可以看到命令行会输出上面的 <code>dd</code> 信息。</p></li><li><p>验证自动注册服务提供者</p><p>将 <code>bootstrap/providers.php</code> 中自动注册的 <code>App\\Providers\\TestingServiceProvider::class,</code> 注释，然后再次运行 <code>php artisan inspire</code> 命令，可以看到命令行不再输出上面的 <code>dd</code> 信息。</p></li></ol><p>所以，在 Laravel 11 中自定义的服务提供者文件不在 <code>config/app.php</code> 中进行配置，而是在 <code>bootstrap/providers.php</code> 中进行配置，并且自定义的服务提供者如果是通过 <code>make:provider</code> 命令创建的则无需手动配置，Laravel 框架会自动注册。</p><h3 id="中间件-middlewares" tabindex="-1">中间件 Middlewares <a class="header-anchor" href="#中间件-middlewares" aria-label="Permalink to &quot;中间件 Middlewares&quot;">​</a></h3><p>Laravel 框架自带了很多中间件来处理不同的请求，比如 <code>TrimStrings</code> 中间件用来去除请求参数和请求头中的空格。</p><h4 id="自定义默认中间件配置" tabindex="-1">自定义默认中间件配置 <a class="header-anchor" href="#自定义默认中间件配置" aria-label="Permalink to &quot;自定义默认中间件配置&quot;">​</a></h4><p>相比于 <a href="https://github.com/laravel/laravel/tree/10.x/app/Http/Middleware" target="_blank" rel="noreferrer">Laravel 10 的中间件</a>，在 Laravel 11 中默认的中间件 <code>app/Http/Middleware</code> 已被移除，如果需要修改默认中间件的配置，可以在服务器提供者 <code>app/Providers/AppServiceProvider.php</code> 中进行配置。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> boot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 自定义默认中间件配置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    TrimStrings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">except</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;secret&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ## 配置不加密的cookie </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    EncryptCookies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">except</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;some_cookie_name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ## 登录成功后跳转的路由</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    RedirectIfAuthenticated</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redirectUsing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () =&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dashboard&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    ## 未登录的用户跳转的路由</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Authenticate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redirectUsing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () =&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="自定义中间件" tabindex="-1">自定义中间件 <a class="header-anchor" href="#自定义中间件" aria-label="Permalink to &quot;自定义中间件&quot;">​</a></h4><p>Laravel 10 中注册自定义中间件的位置在 <a href="https://github.com/laravel/laravel/blob/10.x/app/Http/Kernel.php" target="_blank" rel="noreferrer"><code>app/Http/Kernel.php</code></a> 文件，而在 Laravel 11 中这个文件被移除了。</p><p>Laravel 11 中通过在配置文件 <a href="https://github.com/laravel/laravel/blob/11.x/bootstrap/app.php#L13" target="_blank" rel="noreferrer"><code>bootstrap/app.php</code></a> 的 <code>withMiddleware()</code> 方法中进行配置。</p><ol><li><p>创建自定义中间件 通过命令行终端 <code>make:middleware</code> 来创建自定义中间件，创建成功后，可以在 <code>app/Http/Middleware/LogRequestEndPoint.php</code> 中找到自定义中间件的文件。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make:middleware</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LogRequestEndPoint</span></span></code></pre></div></li><li><p>添加自定义中间件逻辑</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Illuminate\\Support\\Facades\\Log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $request, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Closure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $next)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line diff add"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $next($request);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>在 <code>bootstrap/app.php</code> 中添加自定义中间件</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Application</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__DIR__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withMiddleware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Middleware</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $middleware) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         $middleware</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">web</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LogRequestEndPoint</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 追加 web 中间件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // $middleware-&gt;append(); // 追加全局中间件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // $middleware-&gt;api(...); // 设置 api 中间件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // $middleware-&gt;alias(...); // 设置中间件别名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span></code></pre></div></li><li><p>此刻，当访问任何路由时，都会在日志中记录下访问的 URL。</p></li></ol><h3 id="定时任务-schedule" tabindex="-1">定时任务 Schedule <a class="header-anchor" href="#定时任务-schedule" aria-label="Permalink to &quot;定时任务 Schedule&quot;">​</a></h3><p>在 Laravel 10 中，如果需要配置项目的定时任务可以在 <a href="https://github.com/laravel/laravel/blob/10.x/app/Console/Kernel.php#L13" target="_blank" rel="noreferrer"><code>app/Console/Kernel.php</code></a> 的 <code>schedule()</code> 方法中进行配置。</p><p>Laravel 11 中 <code>app/Console/Kernel.php</code> 文件被删除，取而代之的是在 <code>routes/console.php</code> 中进行配置。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Illuminate\\Support\\Facades\\Schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 每天删除模型过期数据</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Schedule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">command</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;model:prune&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">daily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>也可以通过下面的命令对当前项目的定时任务进行查看：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">php</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> artisan</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> schedule:list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出如下:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 0 * * * *  php artisan inspire ............ Next Due: 45 minutes from now</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 0 0 * * *  php artisan model:prune .......... Next Due: 18 hours from now</span></span></code></pre></div><h2 id="相关链接" tabindex="-1">相关链接 <a class="header-anchor" href="#相关链接" aria-label="Permalink to &quot;相关链接&quot;">​</a></h2><ul><li><a href="https://laravel-news.com/laravel-11" target="_blank" rel="noreferrer">Laravel 11 is now released!</a></li><li><a href="https://laracasts.com/series/whats-new-in-laravel-11" target="_blank" rel="noreferrer">What&#39;s New in Laravel 11</a></li></ul>`,32),h=[n];function t(k,r,d,o,c,g){return a(),i("div",null,h)}const F=s(l,[["render",t]]);export{y as __pageData,F as default};
