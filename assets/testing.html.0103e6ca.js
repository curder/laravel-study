import{e as n}from"./app.0c9bc181.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="testing-\u6D4B\u8BD5" tabindex="-1"><a class="header-anchor" href="#testing-\u6D4B\u8BD5" aria-hidden="true">#</a> Testing \u6D4B\u8BD5</h1><h2 id="\u6D4B\u8BD5\u547D\u4EE4\u5B9A\u65F6\u6267\u884C" tabindex="-1"><a class="header-anchor" href="#\u6D4B\u8BD5\u547D\u4EE4\u5B9A\u65F6\u6267\u884C" aria-hidden="true">#</a> \u6D4B\u8BD5\u547D\u4EE4\u5B9A\u65F6\u6267\u884C</h2><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// App\\Console\\Kernel</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Kernel</span> <span class="token keyword">extends</span> <span class="token class-name">ConsoleKernel</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Scheduling<span class="token punctuation">\\</span>Schedule</span><span class="token punctuation">;</span>
    <span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Console<span class="token punctuation">\\</span>Kernel</span> <span class="token keyword">as</span> ConsoleKernel<span class="token punctuation">;</span>
    
    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">schedule</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Schedule</span> <span class="token variable">$schedule</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$schedule</span><span class="token operator">-&gt;</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;check:api-token&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">dailyAt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;10:00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u68C0\u67E5\u662F\u5426\u9700\u8981\u53D1\u9001apiToken\u5230\u671F\u901A\u77E5</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Test</span>
<span class="token doc-comment comment">/** <span class="token keyword">@test</span> */</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">check_api_token_command_is_scheduled_at_10am</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
<span class="token punctuation">{</span>
    <span class="token variable">$schedule</span> <span class="token operator">=</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token class-name static-context">Schedule</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/** <span class="token keyword">@var</span> <span class="token class-name">Event</span> <span class="token parameter">$event</span> */</span>
    <span class="token variable">$event</span> <span class="token operator">=</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token variable">$schedule</span><span class="token operator">-&gt;</span><span class="token function">events</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">-&gt;</span><span class="token function">filter</span><span class="token punctuation">(</span>
            <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Event</span> <span class="token variable">$event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">Str</span><span class="token operator">::</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token property">command</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;check:api_token&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertInstanceOf</span><span class="token punctuation">(</span><span class="token class-name static-context">Event</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token variable">$event</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;0 10 * * *&#39;</span><span class="token punctuation">,</span> <span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token property">expression</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>`,3);function e(t,o){return p}var u=s(a,[["render",e]]);export{u as default};
