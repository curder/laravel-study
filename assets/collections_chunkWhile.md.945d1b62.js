import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.e8ee2c8f.js";const u=JSON.parse('{"title":"chunkWhile","description":"","frontmatter":{},"headers":[],"relativePath":"collections/chunkWhile.md","filePath":"collections/chunkWhile.md","lastUpdated":1695351225000}'),o={name:"collections/chunkWhile.md"},p=l(`<h1 id="chunkwhile" tabindex="-1">chunkWhile <a class="header-anchor" href="#chunkwhile" aria-label="Permalink to &quot;chunkWhile&quot;">​</a></h1><blockquote><p>根据给定的回调将集合分成多个较小的集合，传递给闭包的 <code>Collection $chunk</code> 变量可以用于检查集合中的前一个元素。</p></blockquote><h2 id="相关示例" tabindex="-1">相关示例 <a class="header-anchor" href="#相关示例" aria-label="Permalink to &quot;相关示例&quot;">​</a></h2><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$collection </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">str_split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;AABBCCCD&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$collection</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">chunkWhile</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> $value, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> $key, </span><span style="color:#79B8FF;">Collection</span><span style="color:#E1E4E8;"> $chunk) =&gt; $value </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> $chunk</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">last</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// [[&#39;A&#39;, &#39;A&#39;], [&#39;B&#39;, &#39;B&#39;], [&#39;C&#39;, &#39;C&#39;, &#39;C&#39;], [&#39;D&#39;]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$collection </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">str_split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;AABBCCCD&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$collection</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">chunkWhile</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> $value, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> $key, </span><span style="color:#005CC5;">Collection</span><span style="color:#24292E;"> $chunk) =&gt; $value </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> $chunk</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">last</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">toArray</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// [[&#39;A&#39;, &#39;A&#39;], [&#39;B&#39;, &#39;B&#39;], [&#39;C&#39;, &#39;C&#39;, &#39;C&#39;], [&#39;D&#39;]]</span></span></code></pre></div><p>每次循环时，闭包中的 <code>$chunk</code> 变量都会填充为前面已循环的所有元素的集合。</p>`,5),e=[p];function c(t,r,i,y,E,h){return n(),a("div",null,e)}const k=s(o,[["render",c]]);export{u as __pageData,k as default};
