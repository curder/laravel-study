import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.aefb929a.js";const u=JSON.parse('{"title":"Model 模型","description":"","frontmatter":{},"headers":[],"relativePath":"partials/model.md","filePath":"partials/model.md","lastUpdated":1695266413000}'),p={name:"partials/model.md"},o=l(`<h1 id="model-模型" tabindex="-1">Model 模型 <a class="header-anchor" href="#model-模型" aria-label="Permalink to &quot;Model 模型&quot;">​</a></h1><h2 id="判断对象是否新增-wasrecentlycreated" tabindex="-1">判断对象是否新增 <code>wasRecentlyCreated</code> <a class="header-anchor" href="#判断对象是否新增-wasrecentlycreated" aria-label="Permalink to &quot;判断对象是否新增 \`wasRecentlyCreated\`&quot;">​</a></h2><p>在 Laravel 中，有时可能需要检查模型是从数据库中获取的还是刚刚在当前请求生命周期中创建的——比如使用 <code>firstOrCreate()</code> 时。</p><p>为此，您可以在模型上使用 <code>-&gt;wasRecentlyCreated</code> 字段。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">createOrUpdate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;email&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;email&#39;</span><span style="color:#E1E4E8;">)],</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ($user</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">wasRecentlyCreated) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 用户新增逻辑代码</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 用户已存在并从数据库中获取</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">createOrUpdate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;email&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;email&#39;</span><span style="color:#24292E;">)],</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ($user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">wasRecentlyCreated) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 用户新增逻辑代码</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 用户已存在并从数据库中获取</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="重用或克隆查询" tabindex="-1">重用或克隆查询 <a class="header-anchor" href="#重用或克隆查询" aria-label="Permalink to &quot;重用或克隆查询&quot;">​</a></h2><p>通常，需要从过滤后的查询再进行多次查询。大多数时候使用 <code>query()</code> 方法，编写一个查询来获取创建的活跃和非活跃产品。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$query </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Product</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$today </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">request</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">q_date </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">today</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ($today) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    $query</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;created_at&#39;</span><span style="color:#E1E4E8;">, $today);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$active_products </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $query</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;status&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 不会修改 $query 变量</span></span>
<span class="line"><span style="color:#E1E4E8;">$inactive_products </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $query</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;status&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 从 $query 中获取正确的产品</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$query </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Product</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$today </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">request</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">q_date </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">today</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ($today) {</span></span>
<span class="line"><span style="color:#24292E;">    $query</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;created_at&#39;</span><span style="color:#24292E;">, $today);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$active_products </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $query</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;status&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 不会修改 $query 变量</span></span>
<span class="line"><span style="color:#24292E;">$inactive_products </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $query</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;status&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 从 $query 中获取正确的产品</span></span></code></pre></div><h2 id="模型的时间查询方法" tabindex="-1">模型的时间查询方法 <a class="header-anchor" href="#模型的时间查询方法" aria-label="Permalink to &quot;模型的时间查询方法&quot;">​</a></h2><p>Laravel 提供了一些时间查询方法，例如：<code>whereDate</code>、<code>whereMonth</code>、<code>whereDay</code>、<code>whereYear</code>、<code>whereTime</code>。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$products </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Product</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">whereDate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;created_at&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2018-01-31&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">$products </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Product</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">whereMonth</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;created_at&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;12&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">$products </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Product</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">whereDay</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;created_at&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;31&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">$products </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Product</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">whereYear</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;created_at&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">date</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Y&#39;</span><span style="color:#E1E4E8;">))</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">$products </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Product</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">whereTime</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;created_at&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;=&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;14:13:58&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$products </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Product</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">whereDate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;created_at&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2018-01-31&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">$products </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Product</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">whereMonth</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;created_at&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;12&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">$products </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Product</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">whereDay</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;created_at&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;31&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">$products </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Product</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">whereYear</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;created_at&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">date</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Y&#39;</span><span style="color:#24292E;">))</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">$products </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Product</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">whereTime</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;created_at&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;=&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;14:13:58&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="增减某个字段" tabindex="-1">增减某个字段 <a class="header-anchor" href="#增减某个字段" aria-label="Permalink to &quot;增减某个字段&quot;">​</a></h2><p>如果想在某个表中增加某列的数值，只需使用 <code>increment()</code> 函数。 当然不仅可以增加 <code>1</code>，也可以增加一些数字，比如 <code>50</code>。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Post</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">($post_id)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;view_count&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">($user_id)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">decrement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;points&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;"># 减少字段 points 的值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Post</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">($post_id)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;view_count&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">($user_id)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">decrement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;points&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">50</span><span style="color:#24292E;">); </span><span style="color:#6A737D;"># 减少字段 points 的值</span></span></code></pre></div><h2 id="表不存在时间字段" tabindex="-1">表不存在时间字段 <a class="header-anchor" href="#表不存在时间字段" aria-label="Permalink to &quot;表不存在时间字段&quot;">​</a></h2><p>如果数据库表不包含时间戳字段 <code>created_at</code> 和 <code>updated_at</code>，可以通过 <code>$timestamps = false</code> 属性指定模型不使用它们。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Company</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $timestamps </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Company</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $timestamps </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="软删除-多次还原" tabindex="-1">软删除：多次还原 <a class="header-anchor" href="#软删除-多次还原" aria-label="Permalink to &quot;软删除：多次还原&quot;">​</a></h2><p>使用软删除时，使用 <code>restore()</code> 恢复多行。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Post</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">onlyTrashed</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;author_id&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">restore</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Post</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">onlyTrashed</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;author_id&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">restore</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="all-方法值定返回字段" tabindex="-1"><code>all</code> 方法值定返回字段 <a class="header-anchor" href="#all-方法值定返回字段" aria-label="Permalink to &quot;\`all\` 方法值定返回字段&quot;">​</a></h2><p>调用模型的 <code>Model::all()</code> 时，可以指定要返回的列。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;email&#39;</span><span style="color:#E1E4E8;">]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;email&#39;</span><span style="color:#24292E;">]);</span></span></code></pre></div><h2 id="是否返回失败还是模型实例" tabindex="-1">是否返回失败还是模型实例 <a class="header-anchor" href="#是否返回失败还是模型实例" aria-label="Permalink to &quot;是否返回失败还是模型实例&quot;">​</a></h2><p>除了 <code>findOrFail()</code>，还有模型方法 <code>firstOrFail()</code>，如果没有找到查询记录，会返回 404 。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;email&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;test@exmple.com&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">firstOrFail</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 可以调用 \`firstOr()\` 对失败执行其他操作</span></span>
<span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;email&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;test@example.com&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">firstOr</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;email&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;test@exmple.com&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">firstOrFail</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 可以调用 \`firstOr()\` 对失败执行其他操作</span></span>
<span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;email&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;test@example.com&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">firstOr</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="findorfail-方法还接受主键数组" tabindex="-1"><code>findOrFail()</code> 方法还接受主键数组 <a class="header-anchor" href="#findorfail-方法还接受主键数组" aria-label="Permalink to &quot;\`findOrFail()\` 方法还接受主键数组&quot;">​</a></h2><p><code>findOrFail()</code> 方法接受主键数组。如果未找到任何这些 id，则它“失败”。</p><p>如果需要检索一组特定的模型并且不想检查您获得的计数是否是您预期的计数。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">findOrFail</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 检索用户</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">findOrFail</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 因为用户不存在而抛出 404</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">findOrFail</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">// 检索三个用户</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">findOrFail</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">// 抛出因为它无法找到 *all* 的用户</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">findOrFail</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 检索用户</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">findOrFail</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">99</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 因为用户不存在而抛出 404</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">findOrFail</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// 检索三个用户</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">findOrFail</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">99</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// 抛出因为它无法找到 *all* 的用户</span></span></code></pre></div><h2 id="修改数据库字段" tabindex="-1">修改数据库字段 <a class="header-anchor" href="#修改数据库字段" aria-label="Permalink to &quot;修改数据库字段&quot;">​</a></h2><p>在查询语句中，可以指定 <code>as</code> 以返回具有不同名称的任何列，就像在普通 SQL 查询中一样。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">DB</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">table</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;users&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;email as user_email&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">DB</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">table</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;users&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;email as user_email&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="查询结果集使用map回调" tabindex="-1">查询结果集使用map回调 <a class="header-anchor" href="#查询结果集使用map回调" aria-label="Permalink to &quot;查询结果集使用map回调&quot;">​</a></h2><p>在模型查询后，可以使用 <code>Collections</code> 中的 <code>map()</code> 函数来修改行。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;role_id&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">User</span><span style="color:#E1E4E8;"> $user) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    $user</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">some_column </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">some_function</span><span style="color:#E1E4E8;">($user);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $user;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;role_id&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">User</span><span style="color:#24292E;"> $user) {</span></span>
<span class="line"><span style="color:#24292E;">    $user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">some_column </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">some_function</span><span style="color:#24292E;">($user);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $user;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="修改默认的时间字段" tabindex="-1">修改默认的时间字段 <a class="header-anchor" href="#修改默认的时间字段" aria-label="Permalink to &quot;修改默认的时间字段&quot;">​</a></h2><p>如果使用的是非 Laravel 数据库并且时间戳列的名称不同怎么办？ 比如 <code>create_time</code> 和 <code>update_time</code>。 可以在模型中指定它们：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CREATED_AT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;create_time&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">UPDATED_AT</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;update_time&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CREATED_AT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;create_time&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">UPDATED_AT</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;update_time&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="通过某个字段快速排序" tabindex="-1">通过某个字段快速排序 <a class="header-anchor" href="#通过某个字段快速排序" aria-label="Permalink to &quot;通过某个字段快速排序&quot;">​</a></h2><p>通过使用 <code>latest()</code> 和 <code>oldest()</code> 代替 <code>-&gt;orderBy()</code>。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">latest</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 降序排序，代替 -&gt;orderBy(&#39;created_at&#39;, &#39;desc&#39;)</span></span>
<span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">oldest</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 升序排序</span></span>
<span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">latest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;updated_at&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 指定字段，降序排序</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">latest</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 降序排序，代替 -&gt;orderBy(&#39;created_at&#39;, &#39;desc&#39;)</span></span>
<span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">oldest</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 升序排序</span></span>
<span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">latest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;updated_at&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 指定字段，降序排序</span></span></code></pre></div><h2 id="数据库原始查询计算运行得更快" tabindex="-1">数据库原始查询计算运行得更快 <a class="header-anchor" href="#数据库原始查询计算运行得更快" aria-label="Permalink to &quot;数据库原始查询计算运行得更快&quot;">​</a></h2><p>使用 SQL 原始查询，如 <code>whereRaw()</code> 方法，直接在查询中进行一些特定于 <code>DB</code> 的计算，而不是在 <code>Laravel</code> 中，通常结果会更快。</p><p>例如，如果想获得注册后 30 天以上仍处于活跃状态的用户，代码如下：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;active&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">whereRaw</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TIMESTAMPDIFF(DAY, created_at, updated_at) &gt; ?&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;active&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">whereRaw</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;TIMESTAMPDIFF(DAY, created_at, updated_at) &gt; ?&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="多个-scope-查询" tabindex="-1">多个 scope 查询 <a class="header-anchor" href="#多个-scope-查询" aria-label="Permalink to &quot;多个 scope 查询&quot;">​</a></h2><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 模型定义</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scopeActive</span><span style="color:#E1E4E8;">($query) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $query</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;active&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scopeRegisteredWithinDays</span><span style="color:#E1E4E8;">($query, $days) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $query</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;created_at&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&gt;=&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">subDays</span><span style="color:#E1E4E8;">($days));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 </span></span>
<span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">registeredWithinDays</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">active</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 模型定义</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scopeActive</span><span style="color:#24292E;">($query) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $query</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;active&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scopeRegisteredWithinDays</span><span style="color:#24292E;">($query, $days) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $query</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;created_at&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&gt;=&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">subDays</span><span style="color:#24292E;">($days));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 </span></span>
<span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">registeredWithinDays</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">active</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="无需转换-carbon" tabindex="-1">无需转换 carbon <a class="header-anchor" href="#无需转换-carbon" aria-label="Permalink to &quot;无需转换 carbon&quot;">​</a></h2><p>如果正在执行 <code>whereDate()</code> 并检索今天的记录，可以使用 Carbon 的 <code>now()</code> ，它会自动转换为日期。 无需执行 <code>-&gt;toDateString()</code>。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 无需对时间进行转换，直接使用 \`now()\`</span></span>
<span class="line"><span style="color:#E1E4E8;">$todayUsers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">whereDate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;created_at&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">())</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 无需对时间进行转换，直接使用 \`now()\`</span></span>
<span class="line"><span style="color:#24292E;">$todayUsers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">whereDate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;created_at&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">())</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="按首字母分组" tabindex="-1">按首字母分组 <a class="header-anchor" href="#按首字母分组" aria-label="Permalink to &quot;按首字母分组&quot;">​</a></h2><p>可以按任何自定义条件对 Eloquent 结果进行分组。</p><p>以下是按用户名的首字母分组的方法：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">groupBy</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">($item) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $item</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">name[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">groupBy</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">($item) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $item</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">name[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="字段仅更新一次" tabindex="-1">字段仅更新一次 <a class="header-anchor" href="#字段仅更新一次" aria-label="Permalink to &quot;字段仅更新一次&quot;">​</a></h2><p>如果有 DB 列，只想设置一次并且不再更新，可以使用 mutator 对 Eloquent 模型设置该限制：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setEmailAttribute</span><span style="color:#E1E4E8;">($value)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">email) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">attributes[</span><span style="color:#9ECBFF;">&#39;email&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setEmailAttribute</span><span style="color:#24292E;">($value)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">email) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">attributes[</span><span style="color:#032F62;">&#39;email&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $value;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="find-方法针对主键查询更多" tabindex="-1">find 方法针对主键查询更多 <a class="header-anchor" href="#find-方法针对主键查询更多" aria-label="Permalink to &quot;find 方法针对主键查询更多&quot;">​</a></h2><p>模型方法 <code>find()</code> 可以接受多个数组参数，然后它返回一个包含所有找到的记录的集合，而不仅仅是一个模型实例：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回模型实例</span></span>
<span class="line"><span style="color:#E1E4E8;">$users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">// 返回模型集合</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">], [</span><span style="color:#9ECBFF;">&#39;first_name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;email&#39;</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">// 指定返回的模型集合中的对应字段</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通过模型主键查询可以通过 \`-&gt;whereKey()\` 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">$users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">whereKey</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">])</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回模型实例</span></span>
<span class="line"><span style="color:#24292E;">$users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// 返回模型集合</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">], [</span><span style="color:#032F62;">&#39;first_name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;email&#39;</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// 指定返回的模型集合中的对应字段</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通过模型主键查询可以通过 \`-&gt;whereKey()\` 方法</span></span>
<span class="line"><span style="color:#24292E;">$users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">whereKey</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="使用uuid代替主键自增" tabindex="-1">使用UUID代替主键自增 <a class="header-anchor" href="#使用uuid代替主键自增" aria-label="Permalink to &quot;使用UUID代替主键自增&quot;">​</a></h2><p>在模型中不希望使用主键自增？可以使用UUID代替：</p><ul><li>迁移文件</li></ul><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Schema</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;users&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">Blueprint</span><span style="color:#E1E4E8;"> $table) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// $table-&gt;increments(&#39;id&#39;);</span></span>
<span class="line"><span style="color:#E1E4E8;">    $table</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">uuid</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">unique</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Schema</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;users&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">Blueprint</span><span style="color:#24292E;"> $table) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// $table-&gt;increments(&#39;id&#39;);</span></span>
<span class="line"><span style="color:#24292E;">    $table</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">uuid</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">unique</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><ul><li>模型定义</li></ul><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $incrementing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> $keyType </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">boot</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">parent::</span><span style="color:#B392F0;">boot</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">creating</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> ($model) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            $model</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setId</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">attributes[</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Str</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">uuid</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $incrementing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> $keyType </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">boot</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">parent::</span><span style="color:#6F42C1;">boot</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">creating</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> ($model) {</span></span>
<span class="line"><span style="color:#24292E;">            $model</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setId</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">attributes[</span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Str</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">uuid</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="子查询" tabindex="-1">子查询 <a class="header-anchor" href="#子查询" aria-label="Permalink to &quot;子查询&quot;">​</a></h2><p>从 Laravel 6 开始，可以在模型语句中使用 <code>addSelect()</code>，并对添加的列进行一些计算。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Destination</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">addSelect</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;last_flight&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Flight</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">select</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">whereColumn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;destination_id&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;destinations.id&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">orderBy</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;arrived_at&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;desc&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">limit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">])</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Destination</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">addSelect</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;last_flight&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Flight</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">select</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">whereColumn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;destination_id&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;destinations.id&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">orderBy</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;arrived_at&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;desc&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">])</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="隐藏一些字段" tabindex="-1">隐藏一些字段 <a class="header-anchor" href="#隐藏一些字段" aria-label="Permalink to &quot;隐藏一些字段&quot;">​</a></h2><p>在进行模型查询时，如果要隐藏特定字段不被返回，最快的方法之一是在 Collection 结果上添加 <code>-&gt;makeHidden()</code>。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">makeHidden</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;email_verified_at&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;deleted_at&#39;</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 或者在模型中定义</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Authenticatable</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> $hidden </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;email_verified_at&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;deleted_at&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">makeHidden</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;email_verified_at&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;deleted_at&#39;</span><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 或者在模型中定义</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Authenticatable</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> $hidden </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;email_verified_at&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;deleted_at&#39;</span></span>
<span class="line"><span style="color:#24292E;">    ];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="捕捉数据库错误" tabindex="-1">捕捉数据库错误 <a class="header-anchor" href="#捕捉数据库错误" aria-label="Permalink to &quot;捕捉数据库错误&quot;">​</a></h2><p>如果要捕获模型查询异常，请使用特定的 <code>QueryException</code> 而不是默认的 <code>Exception</code> 类，将能够获得错误的确切 SQL 代码。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Some Eloquent/SQL statement</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">\\Illuminate\\Database\\QueryException</span><span style="color:#E1E4E8;"> $e) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ($e</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getCode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;23000&#39;</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// integrity constraint violation</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">back</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">withError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Invalid data&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Some Eloquent/SQL statement</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">\\Illuminate\\Database\\QueryException</span><span style="color:#24292E;"> $e) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ($e</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getCode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;23000&#39;</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// integrity constraint violation</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">back</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">withError</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Invalid data&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="查询生成-软删除" tabindex="-1">查询生成 - 软删除 <a class="header-anchor" href="#查询生成-软删除" aria-label="Permalink to &quot;查询生成 - 软删除&quot;">​</a></h2><p>不要忘记，当使用模型时，软删除会排除条目，但如果您使用 Query Builder，则不会起作用。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 将不包含已删除的项</span></span>
<span class="line"><span style="color:#E1E4E8;">$users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">withTrashed</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 包含已删除的项</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$users </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DB</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">table</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;users&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 包含已删除的项</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 将不包含已删除的项</span></span>
<span class="line"><span style="color:#24292E;">$users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">withTrashed</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 包含已删除的项</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$users </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DB</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">table</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;users&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 包含已删除的项</span></span></code></pre></div><h2 id="sql-查询" tabindex="-1">SQL 查询 <a class="header-anchor" href="#sql-查询" aria-label="Permalink to &quot;SQL 查询&quot;">​</a></h2><p>如果需要执行一个简单的 SQL 查询，但没有得到任何结果——比如更改 DB 模式中的某些内容，可以执行 <code>DB::statement()</code>。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">DB</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">statement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;DROP TABLE users&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">DB</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">statement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#F97583;">ALTER</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">TABLE</span><span style="color:#9ECBFF;"> projects AUTO_INCREMENT</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">123</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">DB</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">statement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;DROP TABLE users&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">DB</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">statement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#D73A49;">ALTER</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">TABLE</span><span style="color:#032F62;"> projects AUTO_INCREMENT</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">123</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="使用db事务" tabindex="-1">使用DB事务 <a class="header-anchor" href="#使用db事务" aria-label="Permalink to &quot;使用DB事务&quot;">​</a></h2><p>如果执行了两个数据库操作，第二个可能会出错，那么应该回滚第一个。 为此，建议使用 DB 事务：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">DB</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">transaction</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">DB</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">table</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;users&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;votes&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">DB</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">table</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;posts&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">DB</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">transaction</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">DB</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">table</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;users&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;votes&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">DB</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">table</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;posts&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="更新或创建" tabindex="-1">更新或创建 <a class="header-anchor" href="#更新或创建" aria-label="Permalink to &quot;更新或创建&quot;">​</a></h2><p>如果需要检查记录是否存在，存在则更新它，不存在则创建一个新记录。 使用模型的 <code>updateOrCreate()</code> 方法：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$flight </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Flight</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">updateOrCreate</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#9ECBFF;">&#39;departure&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Oakland&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;destination&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;San Diego&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 条件</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#9ECBFF;">&#39;price&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;discounted&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], </span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$flight </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Flight</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">updateOrCreate</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#032F62;">&#39;departure&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Oakland&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;destination&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;San Diego&#39;</span><span style="color:#24292E;">], </span><span style="color:#6A737D;">// 条件</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#032F62;">&#39;price&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">99</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;discounted&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], </span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="更改日期格式" tabindex="-1">更改日期格式 <a class="header-anchor" href="#更改日期格式" aria-label="Permalink to &quot;更改日期格式&quot;">​</a></h2><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 模型定义</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCreatedAtFormattedAttribute</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">created_at</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;H:i d, M Y&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUpdatedAtFormattedAttribute</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">updated_at</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;H:i d, M Y&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用</span></span>
<span class="line"><span style="color:#E1E4E8;">$user</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">created_at_formatted; </span><span style="color:#6A737D;">// \`12:25 18, Jan 2021\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 模型定义</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCreatedAtFormattedAttribute</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">created_at</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;H:i d, M Y&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getUpdatedAtFormattedAttribute</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">updated_at</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;H:i d, M Y&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用</span></span>
<span class="line"><span style="color:#24292E;">$user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">created_at_formatted; </span><span style="color:#6A737D;">// \`12:25 18, Jan 2021\`</span></span></code></pre></div><h2 id="在json字段中存储数组" tabindex="-1">在JSON字段中存储数组 <a class="header-anchor" href="#在json字段中存储数组" aria-label="Permalink to &quot;在JSON字段中存储数组&quot;">​</a></h2><p>如果输入字段需要一个数组并且必须将其存储为 JSON，可以在模型中使用 <code>$casts</code> 属性。这里的 <code>images</code> 是一个 <code>JSON</code> 属性。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 模型定义</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> $casts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;images&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;array&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 模型定义</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> $casts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;images&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;array&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">];</span></span></code></pre></div><h2 id="模型的副本" tabindex="-1">模型的副本 <a class="header-anchor" href="#模型的副本" aria-label="Permalink to &quot;模型的副本&quot;">​</a></h2><p>如果有两个非常相似的模型（例如送货地址和帐单地址），并且需要将一个复制到另一个，可以使用 <code>replicate()</code> 方法并在此之后更改一些属性。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$shipping </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Address</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;type&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;shipping&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;line_1&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;123 Example Street&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;city&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Victorville&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;state&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;CA&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;postcode&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;90001&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$billing </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $shipping</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">replicate</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;type&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;billing&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$billing</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">save</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$shipping </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Address</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;type&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;shipping&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;line_1&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;123 Example Street&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;city&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Victorville&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;state&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;CA&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;postcode&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;90001&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$billing </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $shipping</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">replicate</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;type&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;billing&#39;</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$billing</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">save</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="删除模型之前执行任何额外步骤" tabindex="-1">删除模型之前执行任何额外步骤 <a class="header-anchor" href="#删除模型之前执行任何额外步骤" aria-label="Permalink to &quot;删除模型之前执行任何额外步骤&quot;">​</a></h2><p>可以在重写的删除方法中使用 <code>Model::delete()</code> 来执行额外的步骤。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// App\\Models\\User.php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 这里有额外的步骤，无论你想要什么</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Model</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 现在执行正常删除</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// App\\Models\\User.php</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 这里有额外的步骤，无论你想要什么</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Model</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 现在执行正常删除</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="将数据持久化到数据库时自动填充列" tabindex="-1">将数据持久化到数据库时自动填充列 <a class="header-anchor" href="#将数据持久化到数据库时自动填充列" aria-label="Permalink to &quot;将数据持久化到数据库时自动填充列&quot;">​</a></h2><p>如果将数据持久化到数据库时自动填充一列（例如：<code>slug</code>），请使用模型监听者而不是每次都对其进行硬编码。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Illuminate\\Support\\Str</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Article</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">boot</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">parent</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">boot</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">static::</span><span style="color:#B392F0;">saving</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> ($model) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            $model</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">slug </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Str</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">slug</span><span style="color:#E1E4E8;">($model</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">title);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Illuminate\\Support\\Str</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Article</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">boot</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">parent</span><span style="color:#24292E;">:</span><span style="color:#6F42C1;">boot</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">static::</span><span style="color:#6F42C1;">saving</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> ($model) {</span></span>
<span class="line"><span style="color:#24292E;">            $model</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">slug </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Str</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">slug</span><span style="color:#24292E;">($model</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">title);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="分析查询" tabindex="-1">分析查询 <a class="header-anchor" href="#分析查询" aria-label="Permalink to &quot;分析查询&quot;">​</a></h2><p>可以在查询上调用 <code>explain()</code> 方法来了解有关查询的额外信息。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Book</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Ruskin Bond&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">explain</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">dd</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 像下面这样</span></span>
<span class="line"><span style="color:#79B8FF;">Illuminate</span><span style="color:#E1E4E8;">\\</span><span style="color:#79B8FF;">Support</span><span style="color:#E1E4E8;">\\</span><span style="color:#79B8FF;">Collection</span><span style="color:#E1E4E8;"> {</span><span style="color:#6A737D;">#5344</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span><span style="color:#6A737D;">#15407</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;select_type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;SIMPLE&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;table&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;books&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;partitions&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;ALL&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;possible_keys&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;key&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;key_len&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;ref&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;rows&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;filtered&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">11.11111164093</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;Extra&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;Using where&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Book</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Ruskin Bond&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">explain</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">dd</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 像下面这样</span></span>
<span class="line"><span style="color:#005CC5;">Illuminate</span><span style="color:#24292E;">\\</span><span style="color:#005CC5;">Support</span><span style="color:#24292E;">\\</span><span style="color:#005CC5;">Collection</span><span style="color:#24292E;"> {</span><span style="color:#6A737D;">#5344</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        {</span><span style="color:#6A737D;">#15407</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;select_type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;SIMPLE&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;table&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;books&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;partitions&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;ALL&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;possible_keys&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;key&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;key_len&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;ref&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;rows&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;filtered&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">11.11111164093</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">+</span><span style="color:#032F62;">&quot;Extra&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;Using where&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="dontexist-方法" tabindex="-1"><code>dontExist()</code> 方法 <a class="header-anchor" href="#dontexist-方法" aria-label="Permalink to &quot;\`dontExist()\` 方法&quot;">​</a></h2><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> $model</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;status&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;pending&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">count</span><span style="color:#E1E4E8;">() ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 但是由于我不关心总数，\`exists()\` 方法更简洁。</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;"> $model</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;status&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;pending&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">exists</span><span style="color:#E1E4E8;">() ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// \`doesntExist()\` 方法使之更加简洁</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ( $model</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;status&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;pending&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">doesntExist</span><span style="color:#E1E4E8;">() ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> $model</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;status&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;pending&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">count</span><span style="color:#24292E;">() ) {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 但是由于我不关心总数，\`exists()\` 方法更简洁。</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( </span><span style="color:#D73A49;">!</span><span style="color:#24292E;"> $model</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;status&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;pending&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">exists</span><span style="color:#24292E;">() ) {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// \`doesntExist()\` 方法使之更加简洁</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ( $model</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;status&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;pending&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">doesntExist</span><span style="color:#24292E;">() ) {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="添加模型的trait且自动调用它们的-boot-方法" tabindex="-1">添加模型的Trait且自动调用它们的 <code>boot()</code> 方法 <a class="header-anchor" href="#添加模型的trait且自动调用它们的-boot-方法" aria-label="Permalink to &quot;添加模型的Trait且自动调用它们的 \`boot()\` 方法&quot;">​</a></h2><p>如果有一个 Trait 想要添加到几个模型中以自动调用它们的 <code>boot()</code> 方法，可以在 <code>Trait</code> 中编写静态方法 boot[TraitName]。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Transaction 模型</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Transaction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MultiTenantModelTrait</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Task 模型</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Task</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MultiTenantModelTrait</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// MultiTenantModelTrait Trait</span></span>
<span class="line"><span style="color:#F97583;">trait</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MultiTenantModelTrait</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// This method&#39;s name is boot[TraitName]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// It will be auto-called as boot() of Transaction/Task</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bootMultiTenantModelTrait</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">static::</span><span style="color:#B392F0;">creating</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> ($model) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">$isAdmin) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                $isAdmin</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">created_by_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">auth</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Transaction 模型</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Transaction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MultiTenantModelTrait</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Task 模型</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Task</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">MultiTenantModelTrait</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// MultiTenantModelTrait Trait</span></span>
<span class="line"><span style="color:#D73A49;">trait</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MultiTenantModelTrait</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// This method&#39;s name is boot[TraitName]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// It will be auto-called as boot() of Transaction/Task</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bootMultiTenantModelTrait</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">static::</span><span style="color:#6F42C1;">creating</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> ($model) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">$isAdmin) {</span></span>
<span class="line"><span style="color:#24292E;">                $isAdmin</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">created_by_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">auth</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="如何防止-非对象属性-错误" tabindex="-1">如何防止“非对象属性”错误 <a class="header-anchor" href="#如何防止-非对象属性-错误" aria-label="Permalink to &quot;如何防止“非对象属性”错误&quot;">​</a></h2><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 如果没有作者附加到帖子，这个关系将返回一个空的 \`App\\Author\` 模型</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">author</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">belongsTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;App\\Author&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">withDefault</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// or</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">author</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">belongsTo</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;App\\Author&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">withDefault</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Guest Author&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 代码调用</span></span>
<span class="line"><span style="color:#E1E4E8;">$post</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">author</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">name;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 如果没有作者附加到帖子，这个关系将返回一个空的 \`App\\Author\` 模型</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">author</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">belongsTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;App\\Author&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">withDefault</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// or</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">author</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">belongsTo</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;App\\Author&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">withDefault</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Guest Author&#39;</span></span>
<span class="line"><span style="color:#24292E;">    ]);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 代码调用</span></span>
<span class="line"><span style="color:#24292E;">$post</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">author</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">name;</span></span></code></pre></div><h2 id="修改模型记录后获取原始属性-getoriginal" tabindex="-1">修改模型记录后获取原始属性 <code>getOriginal()</code> <a class="header-anchor" href="#修改模型记录后获取原始属性-getoriginal" aria-label="Permalink to &quot;修改模型记录后获取原始属性 \`getOriginal()\`&quot;">​</a></h2><p>修改模型记录后获取原始属性，可以通过调用 <code>getOriginal()</code> 获取原始属性。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">App\\User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">first</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">$user</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">name; </span><span style="color:#6A737D;">// John</span></span>
<span class="line"><span style="color:#E1E4E8;">$user</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Peter&quot;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// Peter</span></span>
<span class="line"><span style="color:#E1E4E8;">$user</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getOriginal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// John</span></span>
<span class="line"><span style="color:#E1E4E8;">$user</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">getOriginal</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// Original $user record</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">App\\User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">$user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">name; </span><span style="color:#6A737D;">// John</span></span>
<span class="line"><span style="color:#24292E;">$user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Peter&quot;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Peter</span></span>
<span class="line"><span style="color:#24292E;">$user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getOriginal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// John</span></span>
<span class="line"><span style="color:#24292E;">$user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">getOriginal</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// Original $user record</span></span></code></pre></div><h2 id="填充数据库的简单方法" tabindex="-1">填充数据库的简单方法 <a class="header-anchor" href="#填充数据库的简单方法" aria-label="Permalink to &quot;填充数据库的简单方法&quot;">​</a></h2><p>使用 .sql 转储文件播种数据库的简单方法。假如存在 <code>dump.sql</code>：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">DB</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">unprepared</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">file_get_contents</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">__DIR__</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./dump.sql&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">DB</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">unprepared</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">file_get_contents</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">__DIR__</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">.</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./dump.sql&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="按中间表字段排序" tabindex="-1">按中间表字段排序 <a class="header-anchor" href="#按中间表字段排序" aria-label="Permalink to &quot;按中间表字段排序&quot;">​</a></h2><p><code>BelongsToMany::orderByPivot()</code> 允许直接对 BelongsToMany 关系查询的结果进行排序。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Tag</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $table </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;tags&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Post</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $table </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;posts&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tags</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">belongsToMany</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Tag</span><span style="color:#F97583;">::class</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;post_tag&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;post_id&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;tag_id&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">using</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">PostTagPivot</span><span style="color:#F97583;">::class</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">withTimestamps</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">withPivot</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;flag&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PostTagPivot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pivot</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> $table </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;post_tag&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 调用</span></span>
<span class="line"><span style="color:#79B8FF;">Post</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">findOrFail</span><span style="color:#E1E4E8;">($id)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">tags</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">orderByPivot</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;flag&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;desc&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Tag</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;tags&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Post</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;posts&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tags</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">belongsToMany</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Tag</span><span style="color:#D73A49;">::class</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;post_tag&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;post_id&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;tag_id&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">using</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">PostTagPivot</span><span style="color:#D73A49;">::class</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">withTimestamps</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">withPivot</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;flag&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PostTagPivot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pivot</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> $table </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;post_tag&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 调用</span></span>
<span class="line"><span style="color:#005CC5;">Post</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">findOrFail</span><span style="color:#24292E;">($id)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">tags</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">orderByPivot</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;flag&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;desc&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="查找单个记录" tabindex="-1">查找单个记录 <a class="header-anchor" href="#查找单个记录" aria-label="Permalink to &quot;查找单个记录&quot;">​</a></h2><p><code>sole()</code> 方法将只返回一条符合条件的记录。</p><ul><li><p>如果没有找到这样的条目，则会抛出 <code>NoRecordsFoundException</code>。</p></li><li><p>如果找到多条记录，则会抛出 <code>MultipleRecordsFoundException</code>。</p></li></ul><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">DB</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">table</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;products&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ref&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;#123&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">sole</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">DB</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">table</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;products&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ref&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;#123&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">sole</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="chuckmap-处理结果" tabindex="-1">chuckMap 处理结果 <a class="header-anchor" href="#chuckmap-处理结果" aria-label="Permalink to &quot;chuckMap 处理结果&quot;">​</a></h2><p>类似于 <code>each()</code> 方法，但更易于使用。自动将结果拆分为多个部分（块）。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">orderBy</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">chunkMap</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> ($user) =&gt; [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> $user</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">id,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> $user</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">name,</span></span>
<span class="line"><span style="color:#E1E4E8;">]), </span><span style="color:#79B8FF;">25</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">orderBy</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">chunkMap</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> ($user) =&gt; [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;id&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> $user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">id,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> $user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">name,</span></span>
<span class="line"><span style="color:#24292E;">]), </span><span style="color:#005CC5;">25</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="更新模型但不触发事件" tabindex="-1">更新模型但不触发事件 <a class="header-anchor" href="#更新模型但不触发事件" aria-label="Permalink to &quot;更新模型但不触发事件&quot;">​</a></h2><p>有时需要在不发送任何事件的情况下更新模型。现在可以使用 <code>updateQuietly()</code> 方法来做到这一点，该方法在背后使用 <code>saveQuietly()</code> 方法。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$flight</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">updateQuietly</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;departed&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">]);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$flight</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">updateQuietly</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;departed&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">]);</span></span></code></pre></div><h2 id="定期清理过时记录中的模型" tabindex="-1">定期清理过时记录中的模型 <a class="header-anchor" href="#定期清理过时记录中的模型" aria-label="Permalink to &quot;定期清理过时记录中的模型&quot;">​</a></h2><p>有了这个特性，Laravel会自动执行此操作，只需要在 Kernel 类中调整 <code>model:prune</code> 命令的频率即可。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-GXZXk" id="tab-YwpxA5x" checked="checked"><label for="tab-YwpxA5x">模型定义</label><input type="radio" name="group-GXZXk" id="tab-Lb7iv-k"><label for="tab-Lb7iv-k">定时任务</label></div><div class="blocks"><div class="language-php vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Illuminate\\Database\\Eloquent\\Model</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Illuminate\\Database\\Eloquent\\Prunable</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Flight</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Prunable</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * Get the prunable model query.</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#79B8FF;">\\Illuminate\\Database\\Eloquent\\Builder</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">prunable</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static::</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;created_at&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&amp;lt;=&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">subMonth</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 此外，可以设置在删除模型之前必须执行的操作：</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pruning</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 删除关联资源，例如文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">Storage</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">disk</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;s3&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">filename);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Illuminate\\Database\\Eloquent\\Model</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Illuminate\\Database\\Eloquent\\Prunable</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Flight</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Prunable</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * Get the prunable model query.</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#005CC5;">\\Illuminate\\Database\\Eloquent\\Builder</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">prunable</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static::</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;created_at&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&amp;lt;=&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">subMonth</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 此外，可以设置在删除模型之前必须执行的操作：</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pruning</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 删除关联资源，例如文件</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">Storage</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">disk</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;s3&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">delete</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">filename);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// App\\Console\\Kernel.php</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Define the application&#39;s command schedule.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;">  </span><span style="color:#79B8FF;">\\Illuminate\\Console\\Scheduling\\Schedule</span><span style="color:#6A737D;">  $schedule</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#F97583;">void</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">schedule</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Schedule</span><span style="color:#E1E4E8;"> $schedule)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    $schedule</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;model:prune&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">daily</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// $schedule-&gt;command(&#39;model:prune&#39;, [&#39;--model&#39; =&gt; [Address::class, Flight::class]])-&gt;daily(); // 指定特定模型参数</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// App\\Console\\Kernel.php</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Define the application&#39;s command schedule.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">  </span><span style="color:#005CC5;">\\Illuminate\\Console\\Scheduling\\Schedule</span><span style="color:#6A737D;">  $schedule</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#D73A49;">void</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">schedule</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Schedule</span><span style="color:#24292E;"> $schedule)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    $schedule</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;model:prune&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">daily</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// $schedule-&gt;command(&#39;model:prune&#39;, [&#39;--model&#39; =&gt; [Address::class, Flight::class]])-&gt;daily(); // 指定特定模型参数</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div></div><h2 id="不可变的日期" tabindex="-1">不可变的日期 <a class="header-anchor" href="#不可变的日期" aria-label="Permalink to &quot;不可变的日期&quot;">​</a></h2><p><code>Laravel 8.53</code> 引入了将日期转换为不可变的 <code>immutable_date</code> 和 <code>immutable_datetime</code> 种姓。</p><p>转换为 <code>CarbonImmutable</code> 而不是常规的 <code>Carbon</code> 实例。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> $casts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;date_field&#39;</span><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;immutable_date&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;datetime_field&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;immutable_datetime&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ];</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> $casts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;date_field&#39;</span><span style="color:#24292E;">     </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;immutable_date&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;datetime_field&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;immutable_datetime&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    ];</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="withaggregate-方法" tabindex="-1"><code>withAggregate</code> 方法 <a class="header-anchor" href="#withaggregate-方法" aria-label="Permalink to &quot;\`withAggregate\` 方法&quot;">​</a></h2><p>在底层，模型中的 <code>withAvg</code>/<code>withCount</code>/<code>withSum</code> 和其他方法使用了 <code>withAggregate</code> 方法。</p><p>可以使用此方法添加基于关系的子选择</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 模型 Post</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Post</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">belongsTo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::class</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$posts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Post</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 惰性加载所有用户</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$posts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Post</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">withAggregate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 可以添加子选择以仅检索用户名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$posts</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">first</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">user_name; </span><span style="color:#6A737D;">// 将为 Post 实例添加一个 &#39;user_name&#39; 属性</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 模型 Post</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Post</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">user</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">belongsTo</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::class</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$posts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Post</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">with</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 惰性加载所有用户</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$posts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Post</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">withAggregate</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 可以添加子选择以仅检索用户名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$posts</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">user_name; </span><span style="color:#6A737D;">// 将为 Post 实例添加一个 &#39;user_name&#39; 属性</span></span></code></pre></div><h2 id="upsert-方法插入或更新多条记录" tabindex="-1"><code>upsert()</code> 方法插入或更新多条记录 <a class="header-anchor" href="#upsert-方法插入或更新多条记录" aria-label="Permalink to &quot;\`upsert()\` 方法插入或更新多条记录&quot;">​</a></h2><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Flight</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">upsert</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&#39;departure&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Oakland&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;destination&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;San Diego&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;price&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">99</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&#39;departure&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Chicago&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;destination&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;New York&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;price&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">150</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#9ECBFF;">&#39;departure&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;destination&#39;</span><span style="color:#E1E4E8;">], </span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#9ECBFF;">&#39;price&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;"> );</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Flight</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">upsert</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    [</span></span>
<span class="line"><span style="color:#24292E;">        [</span><span style="color:#032F62;">&#39;departure&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Oakland&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;destination&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;San Diego&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;price&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">99</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">        [</span><span style="color:#032F62;">&#39;departure&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Chicago&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;destination&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;New York&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;price&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">150</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#032F62;">&#39;departure&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;destination&#39;</span><span style="color:#24292E;">], </span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#032F62;">&#39;price&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;"> );</span></span></code></pre></div><ul><li>第一个数组：要插入或更新的值</li><li>第二个数组：select语句中使用的唯一标识符列</li><li>第三个数组：如果记录存在则要更新的列</li></ul><h2 id="过滤结果后检索查询生成器" tabindex="-1">过滤结果后检索查询生成器 <a class="header-anchor" href="#过滤结果后检索查询生成器" aria-label="Permalink to &quot;过滤结果后检索查询生成器&quot;">​</a></h2><p>要在过滤结果后检索查询生成器：您可以使用 <code>-&gt;toQuery()</code>。 该方法在内部使用集合的第一个模型和集合模型上的 <code>whereKey</code> 比较。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$loggedInUsers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;logged_in&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 检索所有已登录的用户</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$nthUsers </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> $loggedInUsers</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">nth</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 使用 Collection 方法或 php 过滤过滤它们</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$nthUsers</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 不能在集合上执行此操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 但是可以使用 \`-&gt;toQuery()\` 检索 Builder</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ($nthUsers</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">()) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    $nthUsers</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">toQuery</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$loggedInUsers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;logged_in&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 检索所有已登录的用户</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$nthUsers </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $loggedInUsers</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">nth</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 使用 Collection 方法或 php 过滤过滤它们</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$nthUsers</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 不能在集合上执行此操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 但是可以使用 \`-&gt;toQuery()\` 检索 Builder</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ($nthUsers</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">()) {</span></span>
<span class="line"><span style="color:#24292E;">    $nthUsers</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">toQuery</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="自定有数据转换" tabindex="-1">自定有数据转换 <a class="header-anchor" href="#自定有数据转换" aria-label="Permalink to &quot;自定有数据转换&quot;">​</a></h2><p>可以创建自定义转换来自动格式化模型数据。如下检索或更改用户名时将其大写的示例。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CapitalizeWordsCast</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CastsAttributes</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">($model, </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> $key, $value, </span><span style="color:#F97583;">array</span><span style="color:#E1E4E8;"> $attributes)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ucwords</span><span style="color:#E1E4E8;">($value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">($model, </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> $key, $value, </span><span style="color:#F97583;">array</span><span style="color:#E1E4E8;"> $attributes)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ucwords</span><span style="color:#E1E4E8;">($value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> $casts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CapitalizeWordsCast</span><span style="color:#F97583;">::class</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;email&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]; </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CapitalizeWordsCast</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CastsAttributes</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">($model, </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> $key, $value, </span><span style="color:#D73A49;">array</span><span style="color:#24292E;"> $attributes)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ucwords</span><span style="color:#24292E;">($value);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">($model, </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> $key, $value, </span><span style="color:#D73A49;">array</span><span style="color:#24292E;"> $attributes)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ucwords</span><span style="color:#24292E;">($value);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> $casts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">CapitalizeWordsCast</span><span style="color:#D73A49;">::class</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;email&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    ]; </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="根据相关模型的平均值或计数排序" tabindex="-1">根据相关模型的平均值或计数排序 <a class="header-anchor" href="#根据相关模型的平均值或计数排序" aria-label="Permalink to &quot;根据相关模型的平均值或计数排序&quot;">​</a></h2><p>是否曾经需要根据相关型号的平均值或计数进行排序</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bestBooks</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Book</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">withAvg</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ratings as average_rating&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;rating&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">orderByDesc</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;average_rating&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bestBooks</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Book</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">withAvg</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ratings as average_rating&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;rating&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">orderByDesc</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;average_rating&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="返回事务结果" tabindex="-1">返回事务结果 <a class="header-anchor" href="#返回事务结果" aria-label="Permalink to &quot;返回事务结果&quot;">​</a></h2><p>如果有一个 DB 事务，想要返回它的结果，至少有两种方式，看例子：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1. 可以通过引用传递参数</span></span>
<span class="line"><span style="color:#E1E4E8;">$invoice </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">NULL</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">DB</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">transaction</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">$invoice) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    $invoice </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Invoice</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    $invoice</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 或更短：只返回事务结果</span></span>
<span class="line"><span style="color:#E1E4E8;">$invoice </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DB</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">transaction</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    $invoice </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Invoice</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    $invoice</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">attach</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $invoice;</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1. 可以通过引用传递参数</span></span>
<span class="line"><span style="color:#24292E;">$invoice </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">NULL</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">DB</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">transaction</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">use</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">$invoice) {</span></span>
<span class="line"><span style="color:#24292E;">    $invoice </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Invoice</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    $invoice</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 或更短：只返回事务结果</span></span>
<span class="line"><span style="color:#24292E;">$invoice </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DB</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">transaction</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    $invoice </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Invoice</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    $invoice</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">items</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">attach</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $invoice;</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="查询中删除-globalscopes" tabindex="-1">查询中删除 <code>globalScopes()</code> <a class="header-anchor" href="#查询中删除-globalscopes" aria-label="Permalink to &quot;查询中删除 \`globalScopes()\`&quot;">​</a></h2><p>使用模型全局作用域时，不仅可以使用 MULTIPLE 作用域，还可以在不需要时删除某些scope，方法是将数组提供给 <code>withoutGlobalScopes()</code>：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 删除所有全局范围</span></span>
<span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">withoutGlobalScopes</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 删除一些全局范围</span></span>
<span class="line"><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">withoutGlobalScopes</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">FirstScope</span><span style="color:#F97583;">::class</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">SecondScope</span><span style="color:#F97583;">::class</span></span>
<span class="line"><span style="color:#E1E4E8;">])</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 删除所有全局范围</span></span>
<span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">withoutGlobalScopes</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 删除一些全局范围</span></span>
<span class="line"><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">withoutGlobalScopes</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">FirstScope</span><span style="color:#D73A49;">::class</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">SecondScope</span><span style="color:#D73A49;">::class</span></span>
<span class="line"><span style="color:#24292E;">])</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="按-json-字段值排序-mysql" tabindex="-1">按 JSON 字段值排序（MySQL） <a class="header-anchor" href="#按-json-字段值排序-mysql" aria-label="Permalink to &quot;按 JSON 字段值排序（MySQL）&quot;">​</a></h2><p>在 Laravel 开发中使用<code>json</code> 类型字段存储多个值，很快就遇到了如何使用 JSON 属性字段对数据进行排序的问题。</p><p>由于 JSON 属性中的数据被转换为字符串数据，因此在 eloquent orderBy 方法中执行 <code>json_field-&gt;property</code> 的常用方法没有给出正确的结果。</p><p>我们可以使用它来排序我们的结果之前，必须将字段属性转换为适当的数据类型，就我而言，我想将其转换为无符号整数。</p><p>Eloquent 模型上的 <code>$casts</code> 属性不适用于 JSON 属性，当前找到的唯一方法是使用 <code>orderByRaw</code>。</p><ul><li>数据排序</li></ul><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Post</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">orderByRaw</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;CAST(extra-&gt;&quot;$.popular_order_number&quot; AS unsigned) ASC&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Post</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">orderByRaw</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;CAST(extra-&gt;&quot;$.popular_order_number&quot; AS unsigned) ASC&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><ul><li>数据查询</li></ul><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Post</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">whereJsonContains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;extra-&gt;is_popular&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Post</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">whereJsonContains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;extra-&gt;is_popular&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span></code></pre></div><p>参考地址：<a href="https://5balloons.info/sort-by-mysql-json-field-value-in-laravel/" target="_blank" rel="noreferrer">Sort by Mysql JSON Field Value in Laravel</a></p><h2 id="从第一个结果中获取单列的值-value" tabindex="-1">从第一个结果中获取单列的值 <code>value()</code> <a class="header-anchor" href="#从第一个结果中获取单列的值-value" aria-label="Permalink to &quot;从第一个结果中获取单列的值 \`value()\`&quot;">​</a></h2><p>可以使用 <code>value()</code> 方法从查询的第一个结果中获取单个列的值</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Instead of</span></span>
<span class="line"><span style="color:#79B8FF;">Integration</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">first</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">active;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// You can use</span></span>
<span class="line"><span style="color:#79B8FF;">Integration</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;active&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// or this to throw an exception if no records found</span></span>
<span class="line"><span style="color:#79B8FF;">Integration</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">valueOrFail</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;active&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#9ECBFF;">&#39;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Instead of</span></span>
<span class="line"><span style="color:#005CC5;">Integration</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">active;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// You can use</span></span>
<span class="line"><span style="color:#005CC5;">Integration</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;active&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// or this to throw an exception if no records found</span></span>
<span class="line"><span style="color:#005CC5;">Integration</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">valueOrFail</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;active&#39;</span><span style="color:#24292E;">)</span><span style="color:#032F62;">&#39;;</span></span></code></pre></div><h2 id="检查更改的值是否更改" tabindex="-1">检查更改的值是否更改 <a class="header-anchor" href="#检查更改的值是否更改" aria-label="Permalink to &quot;检查更改的值是否更改&quot;">​</a></h2><p>想知道对模型所做的更改是否改变了键的值，使用 <code>originalIsEquivalent</code>。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">first</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// [&#39;name&#39; =&gt; &quot;John&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$user</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;John&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$user</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">originalIsEquivalent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$user</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;David&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// Set directly</span></span>
<span class="line"><span style="color:#E1E4E8;">$user</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">fill</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;David&#39;</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">// Or set via fill</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">$user</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">originalIsEquivalent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// [&#39;name&#39; =&gt; &quot;John&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;John&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">originalIsEquivalent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;David&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// Set directly</span></span>
<span class="line"><span style="color:#24292E;">$user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">fill</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;David&#39;</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// Or set via fill</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">$user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">originalIsEquivalent</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;name&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h2 id="定义访问器和修改器的新方法" tabindex="-1">定义访问器和修改器的新方法 <a class="header-anchor" href="#定义访问器和修改器的新方法" aria-label="Permalink to &quot;定义访问器和修改器的新方法&quot;">​</a></h2><p>在 Laravel 8.77 中定义属性访问器和修改器的新方法：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Before, two-method approach</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setTitleAttribute</span><span style="color:#E1E4E8;">($value)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">attributes[</span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">strtolower</span><span style="color:#E1E4E8;">($value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getTitleAttribute</span><span style="color:#E1E4E8;">($value)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">strtoupper</span><span style="color:#E1E4E8;">($value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">// New approach</span></span>
<span class="line"><span style="color:#F97583;">protected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Attribute</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Attribute</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> ($value) =&gt; </span><span style="color:#79B8FF;">strtoupper</span><span style="color:#E1E4E8;">($value),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> ($value) =&gt; </span><span style="color:#79B8FF;">strtolower</span><span style="color:#E1E4E8;">($value),</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Before, two-method approach</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setTitleAttribute</span><span style="color:#24292E;">($value)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">attributes[</span><span style="color:#032F62;">&#39;title&#39;</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">strtolower</span><span style="color:#24292E;">($value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getTitleAttribute</span><span style="color:#24292E;">($value)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">strtoupper</span><span style="color:#24292E;">($value);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">// New approach</span></span>
<span class="line"><span style="color:#D73A49;">protected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Attribute</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Attribute</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> ($value) =&gt; </span><span style="color:#005CC5;">strtoupper</span><span style="color:#24292E;">($value),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> ($value) =&gt; </span><span style="color:#005CC5;">strtolower</span><span style="color:#24292E;">($value),</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="保存模型及其所有关系" tabindex="-1">保存模型及其所有关系 <a class="header-anchor" href="#保存模型及其所有关系" aria-label="Permalink to &quot;保存模型及其所有关系&quot;">​</a></h2><p>使用 <code>push()</code> 方法更新数据库中的主模型和相关模型。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 使用 \`push()\` 将主模型与任何更改关系一起保存</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">phone</span><span style="color:#E1E4E8;">( )</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">$this</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">has0ne</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;App\\Models\\Phone&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 使用 \`push()\` 将主模型与任何更改关系一起保存</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Model</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">phone</span><span style="color:#24292E;">( )</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">$this</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">has0ne</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;App\\Models\\Phone&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\App\\Models\\User</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">first</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">$user</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;John&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">$user</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">phone</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">number </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;1234567890&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">$user</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 这会更新数据库中的用户记录和相关的用户电话号码记录</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#24292E;">$user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\App\\Models\\User</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">$user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;John&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">$user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">phone</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">number </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;1234567890&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line highlighted"><span style="color:#24292E;">$user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 这会更新数据库中的用户记录和相关的用户电话号码记录</span></span></code></pre></div><h2 id="获取查询日志" tabindex="-1">获取查询日志 <a class="header-anchor" href="#获取查询日志" aria-label="Permalink to &quot;获取查询日志&quot;">​</a></h2><p>在开发过程中记录所有数据库查询，请将此代码段添加到的 <code>AppServiceProvider.php</code>：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">boot</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">App</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">environment</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&#39;local&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">DB</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">($query) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">logger</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Str</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">replaceArray</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;?&#39;</span><span style="color:#E1E4E8;">, $query</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">bindings, $query</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">sql));</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">boot</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">App</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">environment</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">&#39;local&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">DB</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">($query) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">logger</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Str</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">replaceArray</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;?&#39;</span><span style="color:#24292E;">, $query</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">bindings, $query</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">sql));</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="wherebelongsto-关联查询" tabindex="-1">whereBelongsTo 关联查询 <a class="header-anchor" href="#wherebelongsto-关联查询" aria-label="Permalink to &quot;whereBelongsTo 关联查询&quot;">​</a></h2><p>在 <a href="https://github.com/laravel/framework/releases/tag/v8.63.0" target="_blank" rel="noreferrer">laravel/framework v8.63.0</a> 开始加入 <code>whereBelongsTo</code> 方法。</p><p>这允许从查询中删除已属性外键名称，并使用关系方法作为数据来源！</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ❌</span></span>
<span class="line"><span style="color:#79B8FF;">Post</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;user_id&#39;</span><span style="color:#E1E4E8;">, $user</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">id)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;category_id&#39;</span><span style="color:#E1E4E8;">, $category</span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;">id)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">first</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ✅</span></span>
<span class="line"><span style="color:#79B8FF;">Post</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">whereBelongsTo</span><span style="color:#E1E4E8;">($user)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">whereBelongsTo</span><span style="color:#E1E4E8;">($category)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">first</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ❌</span></span>
<span class="line"><span style="color:#005CC5;">Post</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;user_id&#39;</span><span style="color:#24292E;">, $user</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">id)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;category_id&#39;</span><span style="color:#24292E;">, $category</span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;">id)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ✅</span></span>
<span class="line"><span style="color:#005CC5;">Post</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">whereBelongsTo</span><span style="color:#24292E;">($user)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">whereBelongsTo</span><span style="color:#24292E;">($category)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">first</span><span style="color:#24292E;">();</span></span></code></pre></div>`,190),e=[o];function t(c,r,y,E,i,F){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
