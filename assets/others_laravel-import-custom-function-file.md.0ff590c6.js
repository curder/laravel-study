import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.16715cb7.js";const F=JSON.parse('{"title":"Laravel 添加全局函数","description":"","frontmatter":{},"headers":[],"relativePath":"others/laravel-import-custom-function-file.md","filePath":"others/laravel-import-custom-function-file.md","lastUpdated":1647596180000}'),l={name:"others/laravel-import-custom-function-file.md"},o=p(`<h1 id="laravel-添加全局函数" tabindex="-1">Laravel 添加全局函数 <a class="header-anchor" href="#laravel-添加全局函数" aria-label="Permalink to &quot;Laravel 添加全局函数&quot;">​</a></h1><p>在开发中常常需要在模型、模版或者其他地方使用相同的逻辑，此时可以考虑封装一些自定义函数。</p><h2 id="创建文件" tabindex="-1">创建文件 <a class="header-anchor" href="#创建文件" aria-label="Permalink to &quot;创建文件&quot;">​</a></h2><p>比如在 <code>app/Supports</code> 目录下创建 <code>helpers.php</code> 文件。内容如下：</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;?</span><span style="color:#79B8FF;">php</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Limit the number of characters in a string.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;">  </span><span style="color:#F97583;">string</span><span style="color:#6A737D;">  $value</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;">  </span><span style="color:#F97583;">int</span><span style="color:#6A737D;">  $limit</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;">  </span><span style="color:#F97583;">string</span><span style="color:#6A737D;">  $end</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">limit</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> $value, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> $limit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> $end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">mb_strlen</span><span style="color:#E1E4E8;">($value) </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> $limit) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> $value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rtrim</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">mb_substr</span><span style="color:#E1E4E8;">($value, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, $limit))</span><span style="color:#F97583;">.</span><span style="color:#E1E4E8;">$end;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;?</span><span style="color:#005CC5;">php</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Limit the number of characters in a string.</span></span>
<span class="line"><span style="color:#6A737D;"> *</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">  </span><span style="color:#D73A49;">string</span><span style="color:#6A737D;">  $value</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">  </span><span style="color:#D73A49;">int</span><span style="color:#6A737D;">  $limit</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;">  </span><span style="color:#D73A49;">string</span><span style="color:#6A737D;">  $end</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> $value, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> $limit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> $end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">mb_strlen</span><span style="color:#24292E;">($value) </span><span style="color:#D73A49;">&lt;=</span><span style="color:#24292E;"> $limit) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> $value;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rtrim</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">mb_substr</span><span style="color:#24292E;">($value, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, $limit))</span><span style="color:#D73A49;">.</span><span style="color:#24292E;">$end;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="注册文件" tabindex="-1">注册文件 <a class="header-anchor" href="#注册文件" aria-label="Permalink to &quot;注册文件&quot;">​</a></h2><p>接下来需要在项目的 <code>composer.json</code> 中加载这个文件，在 <code>autoload</code> 配置下添加 <code>files</code> 并执行对应要加载的文件：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;autoload&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;psr-4&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;App\\\\&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;app/&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;Database\\\\Factories\\\\&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;database/factories/&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">&quot;Database\\\\Seeders\\\\&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;database/seeders/&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;files&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;app/Supports/helpers.php&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;autoload&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;psr-4&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;App\\\\&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;app/&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;Database\\\\Factories\\\\&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;database/factories/&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">&quot;Database\\\\Seeders\\\\&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;database/seeders/&quot;</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;files&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;app/Supports/helpers.php&quot;</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="执行自动加载" tabindex="-1">执行自动加载 <a class="header-anchor" href="#执行自动加载" aria-label="Permalink to &quot;执行自动加载&quot;">​</a></h2><p>配置完毕后执行 <code>composer dump-autoload</code> 命令，加载配置文件。</p><p>最后，可以在项目中使用 <code>app/Supports/helpers.php</code> 文件中定义的函数。</p>`,11),e=[o];function t(c,r,y,E,i,u){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{F as __pageData,h as default};
