import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.e8ee2c8f.js";const C=JSON.parse('{"title":"join","description":"","frontmatter":{},"headers":[],"relativePath":"collections/join.md","filePath":"collections/join.md","lastUpdated":1695894360000}'),o={name:"collections/join.md"},p=l(`<h1 id="join" tabindex="-1">join <a class="header-anchor" href="#join" aria-label="Permalink to &quot;join&quot;">​</a></h1><blockquote><p>将集合的值与字符串连接起来。</p></blockquote><p>使用此方法的第二个参数，还可以指定最终元素应如何附加到字符串。</p><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">])</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;, &#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;a, b, c&#39;</span></span>
<span class="line"><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">])</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;, &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;, and &#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;a, b, and c&#39;</span></span>
<span class="line"><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">])</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;, &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39; and &#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;a and b&#39;</span></span>
<span class="line"><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">])</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;, &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39; and &#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;a&#39;</span></span>
<span class="line"><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">([])</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;, &#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39; and &#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// &#39;&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;, &#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;a, b, c&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;, &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;, and &#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;a, b, and c&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;, &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39; and &#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;a and b&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">])</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;, &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39; and &#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;a&#39;</span></span>
<span class="line"><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">([])</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;, &#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39; and &#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// &#39;&#39;</span></span></code></pre></div><h2 id="相关方法" tabindex="-1">相关方法 <a class="header-anchor" href="#相关方法" aria-label="Permalink to &quot;相关方法&quot;">​</a></h2><ul><li><a href="./implode.html">implode</a></li></ul>`,6),e=[p];function c(t,r,y,E,F,i){return a(),n("div",null,e)}const B=s(o,[["render",c]]);export{C as __pageData,B as default};
