(self.webpackChunklaravel_study=self.webpackChunklaravel_study||[]).push([[6794],{1443:(t,l,e)=>{"use strict";e.r(l),e.d(l,{data:()=>n});const n={key:"v-f5745a9a",path:"/collections/",title:"基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"创建集合",slug:"创建集合",children:[]},{level:2,title:"可用的方法",slug:"可用的方法",children:[]},{level:2,title:"其它项目中单独使用",slug:"其它项目中单独使用",children:[{level:3,title:"安装",slug:"安装",children:[]},{level:3,title:"使用",slug:"使用",children:[]}]},{level:2,title:"在JavaScript中使用集合相关操作",slug:"在javascript中使用集合相关操作",children:[]}],filePathRelative:"collections/README.md",git:{updatedTime:1617071363e3,contributors:[]}}},1037:(t,l,e)=>{"use strict";e.r(l),e.d(l,{default:()=>Xa});var n=e(6252);const s=(0,n.uE)('<h1 id="基础"><a class="header-anchor" href="#基础">#</a> 基础</h1><p><code>Illuminate\\Support\\Collection</code> 类提供了一个更具可读性的、更便于处理数组数据的封装，具体例子看下面的代码。</p><p>我们使用了 <code>collect</code> 函数从数组中创建新的集合实例，对其中的每个元素运行 <code>strtoupper</code> 函数之后再移除所有的空元素：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;taylor&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;abigail&#39;</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token operator">-&gt;</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>正如你看到的，<code>Collection</code> 类允许你链式调用其方法，以达到在底层数组上优雅地执行 <code>map</code> 和 <code>reject</code> 操作。一般来说，集合是不可改变的，这意味着每个 <code>Collection</code> 方法都会返回一个全新的 <code>Collection</code> 实例。</p><h2 id="创建集合"><a class="header-anchor" href="#创建集合">#</a> 创建集合</h2><p>如上所述，辅助函数 <code>collect</code> 会为给定的数组返回一个新的 <code>Illuminate\\Support\\Collection</code> 实例。也就是说，创建一个集合就这么简单：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',8),a=(0,n.Uk)("默认情况下， "),m={href:"https://laravel.com/docs/8.x/eloquent",target:"_blank",rel:"noopener noreferrer"},o=(0,n.Uk)("Eloquent"),i=(0,n.Uk)(" 查询的结果返回的内容都是 "),c=(0,n.Wm)("code",null,"Collection",-1),W=(0,n.Uk)(" 实例。"),u=(0,n.Wm)("h2",{id:"可用的方法"},[(0,n.Wm)("a",{class:"header-anchor",href:"#可用的方法"},"#"),(0,n.Uk)(" 可用的方法")],-1),d=(0,n.Wm)("p",null,[(0,n.Uk)("接下来的内容，我们会探讨 "),(0,n.Wm)("code",null,"Collection"),(0,n.Uk)(" 类每个可用的方法。**记住，所有方法都可以以方法链的形式优雅地操纵数组。**而且，几乎所有的方法都会返回新的 "),(0,n.Wm)("code",null,"Collection"),(0,n.Uk)(" 实例，允许在必要时保存集合的原始副本。")],-1),f=(0,n.Wm)("thead",null,[(0,n.Wm)("tr",null,[(0,n.Wm)("th",{style:{"text-align":"left"}},"方法名"),(0,n.Wm)("th",{style:{"text-align":"left"}},"简单说明")])],-1),p={style:{"text-align":"left"}},r=(0,n.Uk)("toJson"),g=(0,n.Wm)("td",{style:{"text-align":"left"}},"将集合转换成 JSON 字符串",-1),y={style:{"text-align":"left"}},k=(0,n.Uk)("all"),h=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Uk)("返回该集合表示的底层"),(0,n.Wm)("strong",null,"数组")],-1),x={style:{"text-align":"left"}},U=(0,n.Uk)("toArray"),w=(0,n.Wm)("td",{style:{"text-align":"left"}},"将集合转换成 PHP 数组",-1),_={style:{"text-align":"left"}},b=(0,n.Uk)("times"),v=(0,n.Wm)("td",{style:{"text-align":"left"}},"通过回调在给定次数内创建一个新的集合",-1),E={style:{"text-align":"left"}},S=(0,n.Uk)("dump"),I=(0,n.Wm)("td",{style:{"text-align":"left"}},"打印集合的元素，调试时很有帮助",-1),B={style:{"text-align":"left"}},N=(0,n.Uk)("each"),C=(0,n.Wm)("td",{style:{"text-align":"left"}},"迭代集合中的内容，同时将其传递到回调函数中",-1),q={style:{"text-align":"left"}},j=(0,n.Uk)("eachSpread"),J=(0,n.Wm)("td",{style:{"text-align":"left"}},"迭代集合中的内容，同时将其传递到回调函数中",-1),K={style:{"text-align":"left"}},A=(0,n.Uk)("only"),D=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回集合中给定键的所有项目",-1),R={style:{"text-align":"left"}},P=(0,n.Uk)("nth"),T=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Uk)("创建由每隔"),(0,n.Wm)("code",null,"n"),(0,n.Uk)("个元素组成一个新集合")],-1),L={style:{"text-align":"left"}},O=(0,n.Uk)("take"),$=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回给定数量项目的新集合",-1),z={style:{"text-align":"left"}},M=(0,n.Uk)("takeUntil"),G=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Uk)("将返回集合中的项目，直到给定的回调返回 "),(0,n.Wm)("code",null,"true")],-1),H={style:{"text-align":"left"}},Y=(0,n.Uk)("takeWhile"),F=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Uk)("返回集合中的项目，直到给定的回调返回 "),(0,n.Wm)("code",null,"false")],-1),Q={style:{"text-align":"left"}},V=(0,n.Uk)("reverse"),X=(0,n.Wm)("td",{style:{"text-align":"left"}},"倒转集合中项目的顺序",-1),Z={style:{"text-align":"left"}},tt=(0,n.Uk)("isEmpty"),lt=(0,n.Wm)("td",{style:{"text-align":"left"}},"判断集合是否为空",-1),et={style:{"text-align":"left"}},nt=(0,n.Uk)("isNotEmpty"),st=(0,n.Wm)("td",{style:{"text-align":"left"}},"判断集合是否不为空",-1),at={style:{"text-align":"left"}},mt=(0,n.Uk)("last"),ot=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回集合中通过给定真实测试的最后一个元素",-1),it={style:{"text-align":"left"}},ct=(0,n.Uk)("first"),Wt=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回集合中通过给定真实测试的第一个元素",-1),ut={style:{"text-align":"left"}},dt=(0,n.Uk)("groupBy"),ft=(0,n.Wm)("td",{style:{"text-align":"left"}},"根据给定的键对集合内的项目进行分组",-1),pt={style:{"text-align":"left"}},rt=(0,n.Uk)("sortBy"),gt=(0,n.Wm)("td",{style:{"text-align":"left"}},"以给定的键对集合进行正序排序",-1),yt={style:{"text-align":"left"}},kt=(0,n.Uk)("sortByDesc"),ht={style:{"text-align":"left"}},xt=(0,n.Uk)("与 "),Ut=(0,n.Uk)("sortBy"),wt=(0,n.Uk)(" 一样，以相反的顺序来对集合进行排序"),_t={style:{"text-align":"left"}},bt=(0,n.Uk)("sort"),vt=(0,n.Wm)("td",{style:{"text-align":"left"}},"保留原数组的键，对集合进行排序",-1),Et={style:{"text-align":"left"}},St=(0,n.Uk)("zip"),It=(0,n.Wm)("td",{style:{"text-align":"left"}},"将给定数组的值与相应索引处的原集合的值合并在一起",-1),Bt={style:{"text-align":"left"}},Nt=(0,n.Uk)("dd"),Ct=(0,n.Wm)("td",{style:{"text-align":"left"}},"打印集合的元素并终止脚本的执行",-1),qt={style:{"text-align":"left"}},jt=(0,n.Uk)("firstWhere"),Jt=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回给定键值对的第一个元素",-1),Kt={style:{"text-align":"left"}},At=(0,n.Uk)("pluck"),Dt=(0,n.Wm)("td",{style:{"text-align":"left"}},"获取集合中给定键对应的所有值",-1),Rt={style:{"text-align":"left"}},Pt=(0,n.Uk)("filter"),Tt=(0,n.Wm)("td",{style:{"text-align":"left"}},"使用给定的回调函数过滤集合的内容，只留下那些通过给定真实测试的内容",-1),Lt={style:{"text-align":"left"}},Ot=(0,n.Uk)("unwrap"),$t=(0,n.Wm)("td",{style:{"text-align":"left"}},"静态 unwrap 方法在适用时从给定值返回集合的基础项",-1),zt={style:{"text-align":"left"}},Mt=(0,n.Uk)("wrap"),Gt=(0,n.Wm)("td",{style:{"text-align":"left"}},"静态 wrap 方法在适用时将给定值包装在集合中",-1),Ht={style:{"text-align":"left"}},Yt=(0,n.Uk)("whereInstanceOf"),Ft=(0,n.Wm)("td",{style:{"text-align":"left"}},"按给定的类类型过滤集合",-1),Qt={style:{"text-align":"left"}},Vt=(0,n.Uk)("whereNotIn"),Xt=(0,n.Wm)("td",{style:{"text-align":"left"}},"集合中不包含的给定键值对进行匹配",-1),Zt={style:{"text-align":"left"}},tl=(0,n.Uk)("whereNotInStrict"),ll=(0,n.Wm)("td",{style:{"text-align":"left"}},"使用严格模式通过集合中不包含的给定键值对进行匹配",-1),el={style:{"text-align":"left"}},nl=(0,n.Uk)("whereIn"),sl=(0,n.Wm)("td",{style:{"text-align":"left"}},"通过给定的键值数组来过滤集合",-1),al={style:{"text-align":"left"}},ml=(0,n.Uk)("whereInStrict"),ol=(0,n.Wm)("td",{style:{"text-align":"left"}},"使用严格模式通过给定的键值数组来过滤集合",-1),il={style:{"text-align":"left"}},cl=(0,n.Uk)("whereBetween"),Wl=(0,n.Wm)("td",{style:{"text-align":"left"}},"通过确定指定的项目值是否在给定范围内来过滤集合",-1),ul={style:{"text-align":"left"}},dl=(0,n.Uk)("whereNotBetween"),fl=(0,n.Wm)("td",{style:{"text-align":"left"}},"通过确定指定的项目值不存在给定范围内来过滤集合",-1),pl={style:{"text-align":"left"}},rl=(0,n.Uk)("where"),gl=(0,n.Wm)("td",{style:{"text-align":"left"}},"通过给定的键值过滤集合",-1),yl={style:{"text-align":"left"}},kl=(0,n.Uk)("whereStrict"),hl=(0,n.Wm)("td",{style:{"text-align":"left"}},"使用严格模式通过给定的键值过滤集合",-1),xl={style:{"text-align":"left"}},Ul=(0,n.Uk)("mapToDirectory"),wl=(0,n.Wm)("td",{style:{"text-align":"left"}},"通过给定的闭包对集合的项目进行分组。该闭包应返回一个包含单个键/值对的关联数组，从而形成一个新的分组值数组",-1),_l={style:{"text-align":"left"}},bl=(0,n.Uk)("mapToGroup"),vl=(0,n.Wm)("td",{style:{"text-align":"left"}},"通过给定的闭包对集合的项目进行分组。 该闭包应返回一个包含单个键/值对的关联数组，从而形成一个新的分组值集合",-1),El={style:{"text-align":"left"}},Sl=(0,n.Uk)("mapSpread"),Il=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Wm)("strong",null,"改变原集合"),(0,n.Uk)("，迭代集合的项目，将每个嵌套的项目值传递到给定的闭包中。 闭包可以自由修改并返回它，从而形成一个新的修改后的集合。")],-1),Bl={style:{"text-align":"left"}},Nl=(0,n.Uk)("mapInto"),Cl=(0,n.Wm)("td",{style:{"text-align":"left"}},"遍历集合，通过将值传递给构造函数来创建给定类的新实例",-1),ql={style:{"text-align":"left"}},jl=(0,n.Uk)("mapWithKeys"),Jl=(0,n.Wm)("td",{style:{"text-align":"left"}},"遍历集合并将每个值传入给定的回调",-1),Kl={style:{"text-align":"left"}},Al=(0,n.Uk)("map"),Dl=(0,n.Wm)("td",{style:{"text-align":"left"}},"遍历集合并将每一个值传入给定的回调",-1),Rl={style:{"text-align":"left"}},Pl=(0,n.Uk)("tap"),Tl=(0,n.Wm)("td",{style:{"text-align":"left"}},"将集合传递给回调，在特定点「tap」集合",-1),Ll={style:{"text-align":"left"}},Ol=(0,n.Uk)("diffUsing"),$l=(0,n.Wm)("td",{style:{"text-align":"left"}},"获取集合中不存在给定项目的项目",-1),zl={style:{"text-align":"left"}},Ml=(0,n.Uk)("diffAssocUsing"),Gl=(0,n.Wm)("td",{style:{"text-align":"left"}},"使用回调获取集合中键和值不存在的项目",-1),Hl={style:{"text-align":"left"}},Yl=(0,n.Uk)("diffKeysUsing"),Fl=(0,n.Wm)("td",{style:{"text-align":"left"}},"使用回调获取集合中键不存在于给定项中的项",-1),Ql={style:{"text-align":"left"}},Vl=(0,n.Uk)("diff"),Xl=(0,n.Wm)("td",{style:{"text-align":"left"}},"基于值求差集",-1),Zl={style:{"text-align":"left"}},te=(0,n.Uk)("diffAssoc"),le=(0,n.Wm)("td",{style:{"text-align":"left"}},"基于键值对求差集",-1),ee={style:{"text-align":"left"}},ne=(0,n.Uk)("diffKeys"),se=(0,n.Wm)("td",{style:{"text-align":"left"}},"基于键求差集",-1),ae={style:{"text-align":"left"}},me=(0,n.Uk)("crossJoin"),oe=(0,n.Wm)("td",{style:{"text-align":"left"}},"将集合的值交叉连接到给定的数组或集合中，返回具有所有可能排列的笛卡尔积",-1),ie={style:{"text-align":"left"}},ce=(0,n.Uk)("count"),We=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回该集合内的项目总数",-1),ue={style:{"text-align":"left"}},de=(0,n.Uk)("contains"),fe=(0,n.Wm)("td",{style:{"text-align":"left"}},"判断集合是否包含给定的项目",-1),pe={style:{"text-align":"left"}},re=(0,n.Uk)("containsStrict"),ge=(0,n.Wm)("td",{style:{"text-align":"left"}},"使用「严格模式」来比较所有值",-1),ye={style:{"text-align":"left"}},ke=(0,n.Uk)("concat"),he=(0,n.Wm)("td",{style:{"text-align":"left"}},"将给定数组或集合的值附加到另一个集合的末尾",-1),xe={style:{"text-align":"left"}},Ue=(0,n.Uk)("combine"),we=(0,n.Wm)("td",{style:{"text-align":"left"}},"将一个集合的值作为「键」，再将另一个数组或者集合的值作为「值」合并成一个集合",-1),_e={style:{"text-align":"left"}},be=(0,n.Uk)("chunk"),ve=(0,n.Wm)("td",{style:{"text-align":"left"}},"将集合拆成多个指定大小的小集合",-1),Ee={style:{"text-align":"left"}},Se=(0,n.Uk)("collapse"),Ie=(0,n.Wm)("td",{style:{"text-align":"left"}},"将多个数组合并成一个",-1),Be={style:{"text-align":"left"}},Ne=(0,n.Uk)("min"),Ce=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回给定键的最小值",-1),qe={style:{"text-align":"left"}},je=(0,n.Uk)("median"),Je=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Uk)("方法返回给定"),(0,n.Wm)("strong",null,"键"),(0,n.Uk)("的中间值")],-1),Ke={style:{"text-align":"left"}},Ae=(0,n.Uk)("max"),De=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Uk)("返回给定"),(0,n.Wm)("strong",null,"键"),(0,n.Uk)("的最大值")],-1),Re={style:{"text-align":"left"}},Pe=(0,n.Uk)("average"),Te=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Uk)("方法"),(0,n.Wm)("code",null,"avg()"),(0,n.Uk)("的别名")],-1),Le={style:{"text-align":"left"}},Oe=(0,n.Uk)("avg"),$e=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Uk)("返回给定键的"),(0,n.Wm)("strong",null,"平均值")],-1),ze={style:{"text-align":"left"}},Me=(0,n.Uk)("every"),Ge=(0,n.Wm)("td",{style:{"text-align":"left"}},"可用于验证集合中每一个元素都通过给定的真实测试",-1),He={style:{"text-align":"left"}},Ye=(0,n.Uk)("except"),Fe=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回集合中除了指定键以外的所有项目",-1),Qe={style:{"text-align":"left"}},Ve=(0,n.Uk)("flatMap"),Xe=(0,n.Wm)("td",{style:{"text-align":"left"}},"遍历集合并将其中的每个值传递到给定的回调",-1),Ze={style:{"text-align":"left"}},tn=(0,n.Uk)("flatten"),ln=(0,n.Wm)("td",{style:{"text-align":"left"}},"将多维集合转为一维",-1),en={style:{"text-align":"left"}},nn=(0,n.Uk)("flip"),sn=(0,n.Wm)("td",{style:{"text-align":"left"}},"将集合中的键和对应的数值进行互换",-1),an={style:{"text-align":"left"}},mn=(0,n.Uk)("forget"),on=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Wm)("strong",null,"改变原集合"),(0,n.Uk)("，通过给定的键来移除掉集合中对应的内容")],-1),cn={style:{"text-align":"left"}},Wn=(0,n.Uk)("forPage"),un=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回给定页码上显示的项目的新集合",-1),dn={style:{"text-align":"left"}},fn=(0,n.Uk)("get"),pn=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回给定键的项目",-1),rn={style:{"text-align":"left"}},gn=(0,n.Uk)("has"),yn=(0,n.Wm)("td",{style:{"text-align":"left"}},"判断集合中是否存在给定的键",-1),kn={style:{"text-align":"left"}},hn=(0,n.Uk)("implode"),xn=(0,n.Wm)("td",{style:{"text-align":"left"}},"合并集合中的项目",-1),Un={style:{"text-align":"left"}},wn=(0,n.Uk)("intersect"),_n=(0,n.Wm)("td",{style:{"text-align":"left"}},"从原集合中删除不在给定数组或集合中的任何值",-1),bn={style:{"text-align":"left"}},vn=(0,n.Uk)("intersectByKeys"),En=(0,n.Wm)("td",{style:{"text-align":"left"}},"删除原集合中不存在于给定数组或集合中的任何键",-1),Sn={style:{"text-align":"left"}},In=(0,n.Uk)("keyBy"),Bn=(0,n.Wm)("td",{style:{"text-align":"left"}},"以给定的键作为集合的键",-1),Nn={style:{"text-align":"left"}},Cn=(0,n.Uk)("keys"),qn=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回集合的所有键",-1),jn={style:{"text-align":"left"}},Jn=(0,n.Uk)("merge"),Kn=(0,n.Wm)("td",{style:{"text-align":"left"}},"将给定数组或集合合并到原集合",-1),An={style:{"text-align":"left"}},Dn=(0,n.Uk)("mergeRecursive"),Rn=(0,n.Wm)("td",{style:{"text-align":"left"}},"将给定的数组或集合与原始集合递归合并",-1),Pn={style:{"text-align":"left"}},Tn=(0,n.Uk)("mode"),Ln={style:{"text-align":"left"}},On=(0,n.Uk)("返回给定"),$n=(0,n.Wm)("strong",null,"键",-1),zn=(0,n.Uk)("的"),Mn={href:"https://baike.baidu.com/item/%E4%BC%97%E6%95%B0/44796",title:"百度百科-众数值",target:"_blank",rel:"noopener noreferrer"},Gn=(0,n.Uk)("众数值"),Hn={style:{"text-align":"left"}},Yn=(0,n.Uk)("partition"),Fn=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Uk)("配合"),(0,n.Wm)("code",null,"list()"),(0,n.Uk)("方法区分回调函数满足和不满足的数据")],-1),Qn={style:{"text-align":"left"}},Vn=(0,n.Uk)("pipe"),Xn=(0,n.Wm)("td",{style:{"text-align":"left"}},"将集合传给给定的回调并返回结果",-1),Zn={style:{"text-align":"left"}},ts=(0,n.Uk)("pipeInto"),ls=(0,n.Wm)("td",{style:{"text-align":"left"}},"创建给定类的新实例，并将集合传递给构造函数",-1),es={style:{"text-align":"left"}},ns=(0,n.Uk)("pop"),ss=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Wm)("strong",null,"改变原集合"),(0,n.Uk)("，移除并返回集合中的最后一个项目")],-1),as={style:{"text-align":"left"}},ms=(0,n.Uk)("prepend"),os=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Wm)("strong",null,"改变原集合"),(0,n.Uk)("，将给定的值添加到集合的开头")],-1),is={style:{"text-align":"left"}},cs=(0,n.Uk)("pull"),Ws=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Wm)("strong",null,"改变原集合"),(0,n.Uk)("，把给定键对应的值从集合中移除并返回")],-1),us={style:{"text-align":"left"}},ds=(0,n.Uk)("push"),fs=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Wm)("strong",null,"改变原集合"),(0,n.Uk)("，把给定值添加到集合的末尾")],-1),ps={style:{"text-align":"left"}},rs=(0,n.Uk)("put"),gs=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Wm)("strong",null,"改变原集合"),(0,n.Uk)("，在集合内设置给定的键值对")],-1),ys={style:{"text-align":"left"}},ks=(0,n.Uk)("random"),hs=(0,n.Wm)("td",{style:{"text-align":"left"}},"从集合中返回一个随机项",-1),xs={style:{"text-align":"left"}},Us=(0,n.Uk)("reduce"),ws=(0,n.Wm)("td",{style:{"text-align":"left"}},"将每次迭代的结果传递给下一次迭代直到集合减少为单个值",-1),_s={style:{"text-align":"left"}},bs=(0,n.Uk)("reject"),vs=(0,n.Wm)("td",{style:{"text-align":"left"}},"使用指定的回调过滤集合",-1),Es={style:{"text-align":"left"}},Ss=(0,n.Uk)("search"),Is=(0,n.Wm)("td",{style:{"text-align":"left"}},"搜索给定的值并返回它的键",-1),Bs={style:{"text-align":"left"}},Ns=(0,n.Uk)("shift"),Cs=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Wm)("strong",null,"改变原集合"),(0,n.Uk)("，移除并返回集合的第一个项目")],-1),qs={style:{"text-align":"left"}},js=(0,n.Uk)("shuffle"),Js=(0,n.Wm)("td",{style:{"text-align":"left"}},"随机排序集合中的项目",-1),Ks={style:{"text-align":"left"}},As=(0,n.Uk)("skip"),Ds=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回一个新的集合，其中给定数量的元素从集合的开头删除",-1),Rs={style:{"text-align":"left"}},Ps=(0,n.Uk)("skipUntil"),Ts=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Uk)("跳过集合中的项目，直到给定的回调返回 "),(0,n.Wm)("code",null,"true"),(0,n.Uk)(" ，然后将集合中的其余项目作为新集合实例返回")],-1),Ls={style:{"text-align":"left"}},Os=(0,n.Uk)("skipWhile"),$s=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Uk)("跳过集合中的项目，同时给定的回调返回 "),(0,n.Wm)("code",null,"true"),(0,n.Uk)(" ，然后将集合中的其余项目作为新集合返回")],-1),zs={style:{"text-align":"left"}},Ms=(0,n.Uk)("slice"),Gs=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回集合中给定值后面的部分",-1),Hs={style:{"text-align":"left"}},Ys=(0,n.Uk)("some"),Fs={style:{"text-align":"left"}},Qs=(0,n.Uk)("contains"),Vs=(0,n.Uk)(" 方法的别名"),Xs={style:{"text-align":"left"}},Zs=(0,n.Uk)("splice"),ta=(0,n.Wm)("td",{style:{"text-align":"left"}},"删除并返回从给定值后的内容，原集合也会受到影响",-1),la={style:{"text-align":"left"}},ea=(0,n.Uk)("split"),na=(0,n.Wm)("td",{style:{"text-align":"left"}},"将集合按给定的值拆分",-1),sa={style:{"text-align":"left"}},aa=(0,n.Uk)("splitIn"),ma=(0,n.Wm)("td",{style:{"text-align":"left"}},"将集合分为给定数量的组",-1),oa={style:{"text-align":"left"}},ia=(0,n.Uk)("sum"),ca=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回集合内所有项目的总和",-1),Wa={style:{"text-align":"left"}},ua=(0,n.Uk)("transform"),da=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Wm)("strong",null,"改变原集合"),(0,n.Uk)("，迭代集合并对集合内的每个项目调用给定的回调")],-1),fa={style:{"text-align":"left"}},pa=(0,n.Uk)("union"),ra=(0,n.Wm)("td",{style:{"text-align":"left"}},"将给定的数组添加到集合中",-1),ga={style:{"text-align":"left"}},ya=(0,n.Uk)("unique"),ka=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回集合中所有唯一的项目",-1),ha={style:{"text-align":"left"}},xa=(0,n.Uk)("uniqueStrict"),Ua=(0,n.Wm)("td",{style:{"text-align":"left"}},"使用严格模式返回集合中所有唯一的项目",-1),wa={style:{"text-align":"left"}},_a=(0,n.Uk)("unless"),ba=(0,n.Wm)("td",{style:{"text-align":"left"}},"除非方法的第一个参数的计算结果为true，否则该方法将执行给定的回调",-1),va={style:{"text-align":"left"}},Ea=(0,n.Uk)("unlessEmpty"),Sa={style:{"text-align":"left"}},Ia=(0,n.Uk)("whenNotEmpty"),Ba=(0,n.Uk)(" 方法的别名"),Na={style:{"text-align":"left"}},Ca=(0,n.Uk)("unlessNotEmpty"),qa={style:{"text-align":"left"}},ja=(0,n.Uk)("whenEmpty"),Ja=(0,n.Uk)(" 方法别名"),Ka={style:{"text-align":"left"}},Aa=(0,n.Uk)("values"),Da=(0,n.Wm)("td",{style:{"text-align":"left"}},"返回键被重置为连续编号的新集合",-1),Ra={style:{"text-align":"left"}},Pa=(0,n.Uk)("when"),Ta=(0,n.Wm)("td",{style:{"text-align":"left"}},"当传入的第一个参数为 true 的时，将执行给定的回调",-1),La={style:{"text-align":"left"}},Oa=(0,n.Uk)("whenEmpty"),$a=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Uk)("当集合为空时，"),(0,n.Wm)("code",null,"whenEmpty"),(0,n.Uk)(" 方法将执行给定的回调")],-1),za={style:{"text-align":"left"}},Ma=(0,n.Uk)("whenNotEmpty"),Ga=(0,n.Wm)("td",{style:{"text-align":"left"}},[(0,n.Uk)("当集合不为空时，"),(0,n.Wm)("code",null,"whenNotEmpty"),(0,n.Uk)(" 方法将执行给定的回调")],-1),Ha=(0,n.uE)('<h2 id="其它项目中单独使用"><a class="header-anchor" href="#其它项目中单独使用">#</a> 其它项目中单独使用</h2><h3 id="安装"><a class="header-anchor" href="#安装">#</a> 安装</h3><p>Laravel 中的 Collection 使用 Composer 管理，所以可以在项目中使用 composer 安装到非 Laravel 项目中，比如新建一个 collections-demo 目录，通过下面使用命令安装</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> collections-demo <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> collections-demo\n<span class="token function">composer</span> require illuminate/support\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>执行完上面的命令将得到所需要的拓展包。</p><h3 id="使用"><a class="header-anchor" href="#使用">#</a> 使用</h3><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token comment">// 引入 package</span>\n<span class="token keyword">require</span> <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;/vendor/autoload.php&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 简单使用</span>\n<span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Illuminate\\Support\\Collection {#1070 all: [1, 2, 3]}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="在javascript中使用集合相关操作"><a class="header-anchor" href="#在javascript中使用集合相关操作">#</a> 在JavaScript中使用集合相关操作</h2>',8),Ya=(0,n.Uk)("如果在 JavaScript 中也需要使用类似的数组操作，可以参考 "),Fa={href:"https://github.com/ecrmnn/collect.js",target:"_blank",rel:"noopener noreferrer"},Qa=(0,n.Uk)("ecrmnn/collect.js"),Va=(0,n.Uk)("。"),Xa={render:function(t,l){const e=(0,n.up)("OutboundLink"),Xa=(0,n.up)("RouterLink");return(0,n.wg)(),(0,n.j4)(n.HY,null,[s,(0,n.Wm)("blockquote",null,[(0,n.Wm)("p",null,[a,(0,n.Wm)("a",m,[o,(0,n.Wm)(e)]),i,c,W])]),u,d,(0,n.Wm)("table",null,[f,(0,n.Wm)("tbody",null,[(0,n.Wm)("tr",null,[(0,n.Wm)("td",p,[(0,n.Wm)(Xa,{to:"/collections/toJson.html"},{default:(0,n.w5)((()=>[r])),_:1})]),g]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",y,[(0,n.Wm)(Xa,{to:"/collections/all.html"},{default:(0,n.w5)((()=>[k])),_:1})]),h]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",x,[(0,n.Wm)(Xa,{to:"/collections/toArray.html"},{default:(0,n.w5)((()=>[U])),_:1})]),w]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",_,[(0,n.Wm)(Xa,{to:"/collections/times.html"},{default:(0,n.w5)((()=>[b])),_:1})]),v]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",E,[(0,n.Wm)(Xa,{to:"/collections/dump.html"},{default:(0,n.w5)((()=>[S])),_:1})]),I]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",B,[(0,n.Wm)(Xa,{to:"/collections/each.html"},{default:(0,n.w5)((()=>[N])),_:1})]),C]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",q,[(0,n.Wm)(Xa,{to:"/collections/eachSpread.html"},{default:(0,n.w5)((()=>[j])),_:1})]),J]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",K,[(0,n.Wm)(Xa,{to:"/collections/only.html"},{default:(0,n.w5)((()=>[A])),_:1})]),D]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",R,[(0,n.Wm)(Xa,{to:"/collections/nth.html"},{default:(0,n.w5)((()=>[P])),_:1})]),T]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",L,[(0,n.Wm)(Xa,{to:"/collections/take.html"},{default:(0,n.w5)((()=>[O])),_:1})]),$]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",z,[(0,n.Wm)(Xa,{to:"/collections/takeUntil.html"},{default:(0,n.w5)((()=>[M])),_:1})]),G]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",H,[(0,n.Wm)(Xa,{to:"/collections/takeWhile.html"},{default:(0,n.w5)((()=>[Y])),_:1})]),F]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Q,[(0,n.Wm)(Xa,{to:"/collections/reverse.html"},{default:(0,n.w5)((()=>[V])),_:1})]),X]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Z,[(0,n.Wm)(Xa,{to:"/collections/isEmpty.html"},{default:(0,n.w5)((()=>[tt])),_:1})]),lt]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",et,[(0,n.Wm)(Xa,{to:"/collections/isNotEmpty.html"},{default:(0,n.w5)((()=>[nt])),_:1})]),st]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",at,[(0,n.Wm)(Xa,{to:"/collections/last.html"},{default:(0,n.w5)((()=>[mt])),_:1})]),ot]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",it,[(0,n.Wm)(Xa,{to:"/collections/first.html"},{default:(0,n.w5)((()=>[ct])),_:1})]),Wt]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",ut,[(0,n.Wm)(Xa,{to:"/collections/groupBy.html"},{default:(0,n.w5)((()=>[dt])),_:1})]),ft]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",pt,[(0,n.Wm)(Xa,{to:"/collections/sortBy.html"},{default:(0,n.w5)((()=>[rt])),_:1})]),gt]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",yt,[(0,n.Wm)(Xa,{to:"/collections/sortByDesc.html"},{default:(0,n.w5)((()=>[kt])),_:1})]),(0,n.Wm)("td",ht,[xt,(0,n.Wm)(Xa,{to:"/collections/sortBy.html"},{default:(0,n.w5)((()=>[Ut])),_:1}),wt])]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",_t,[(0,n.Wm)(Xa,{to:"/collections/sort.html"},{default:(0,n.w5)((()=>[bt])),_:1})]),vt]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Et,[(0,n.Wm)(Xa,{to:"/collections/zip.html"},{default:(0,n.w5)((()=>[St])),_:1})]),It]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Bt,[(0,n.Wm)(Xa,{to:"/collections/dd.html"},{default:(0,n.w5)((()=>[Nt])),_:1})]),Ct]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",qt,[(0,n.Wm)(Xa,{to:"/collections/firstWhere.html"},{default:(0,n.w5)((()=>[jt])),_:1})]),Jt]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Kt,[(0,n.Wm)(Xa,{to:"/collections/pluck.html"},{default:(0,n.w5)((()=>[At])),_:1})]),Dt]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Rt,[(0,n.Wm)(Xa,{to:"/collections/filter.html"},{default:(0,n.w5)((()=>[Pt])),_:1})]),Tt]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Lt,[(0,n.Wm)(Xa,{to:"/collections/unwrap.html"},{default:(0,n.w5)((()=>[Ot])),_:1})]),$t]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",zt,[(0,n.Wm)(Xa,{to:"/collections/wrap.html"},{default:(0,n.w5)((()=>[Mt])),_:1})]),Gt]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Ht,[(0,n.Wm)(Xa,{to:"/collections/whereInstanceOf.html"},{default:(0,n.w5)((()=>[Yt])),_:1})]),Ft]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Qt,[(0,n.Wm)(Xa,{to:"/collections/whereNotIn.html"},{default:(0,n.w5)((()=>[Vt])),_:1})]),Xt]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Zt,[(0,n.Wm)(Xa,{to:"/collections/whereNotInStrict.html"},{default:(0,n.w5)((()=>[tl])),_:1})]),ll]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",el,[(0,n.Wm)(Xa,{to:"/collections/whereIn.html"},{default:(0,n.w5)((()=>[nl])),_:1})]),sl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",al,[(0,n.Wm)(Xa,{to:"/collections/whereInStrict.html"},{default:(0,n.w5)((()=>[ml])),_:1})]),ol]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",il,[(0,n.Wm)(Xa,{to:"/collections/whereBetween.html"},{default:(0,n.w5)((()=>[cl])),_:1})]),Wl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",ul,[(0,n.Wm)(Xa,{to:"/collections/whereNotBetween.html"},{default:(0,n.w5)((()=>[dl])),_:1})]),fl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",pl,[(0,n.Wm)(Xa,{to:"/collections/where.html"},{default:(0,n.w5)((()=>[rl])),_:1})]),gl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",yl,[(0,n.Wm)(Xa,{to:"/collections/whereStrict.html"},{default:(0,n.w5)((()=>[kl])),_:1})]),hl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",xl,[(0,n.Wm)(Xa,{to:"/collections/mapToDictionary.html"},{default:(0,n.w5)((()=>[Ul])),_:1})]),wl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",_l,[(0,n.Wm)(Xa,{to:"/collections/mapToGroup.html"},{default:(0,n.w5)((()=>[bl])),_:1})]),vl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",El,[(0,n.Wm)(Xa,{to:"/collections/mapSpread.html"},{default:(0,n.w5)((()=>[Sl])),_:1})]),Il]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Bl,[(0,n.Wm)(Xa,{to:"/collections/mapInto.html"},{default:(0,n.w5)((()=>[Nl])),_:1})]),Cl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",ql,[(0,n.Wm)(Xa,{to:"/collections/mapWithKeys.html"},{default:(0,n.w5)((()=>[jl])),_:1})]),Jl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Kl,[(0,n.Wm)(Xa,{to:"/collections/map.html"},{default:(0,n.w5)((()=>[Al])),_:1})]),Dl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Rl,[(0,n.Wm)(Xa,{to:"/collections/tap.html"},{default:(0,n.w5)((()=>[Pl])),_:1})]),Tl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Ll,[(0,n.Wm)(Xa,{to:"/collections/diffUsing.html"},{default:(0,n.w5)((()=>[Ol])),_:1})]),$l]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",zl,[(0,n.Wm)(Xa,{to:"/collections/diffAssocUsing.html"},{default:(0,n.w5)((()=>[Ml])),_:1})]),Gl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Hl,[(0,n.Wm)(Xa,{to:"/collections/diffKeysUsing.html"},{default:(0,n.w5)((()=>[Yl])),_:1})]),Fl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Ql,[(0,n.Wm)(Xa,{to:"/collections/diff.html"},{default:(0,n.w5)((()=>[Vl])),_:1})]),Xl]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Zl,[(0,n.Wm)(Xa,{to:"/collections/diffAssoc.html"},{default:(0,n.w5)((()=>[te])),_:1})]),le]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",ee,[(0,n.Wm)(Xa,{to:"/collections/diffKeys.html"},{default:(0,n.w5)((()=>[ne])),_:1})]),se]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",ae,[(0,n.Wm)(Xa,{to:"/collections/crossJoin.html"},{default:(0,n.w5)((()=>[me])),_:1})]),oe]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",ie,[(0,n.Wm)(Xa,{to:"/collections/count.html"},{default:(0,n.w5)((()=>[ce])),_:1})]),We]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",ue,[(0,n.Wm)(Xa,{to:"/collections/contains.html"},{default:(0,n.w5)((()=>[de])),_:1})]),fe]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",pe,[(0,n.Wm)(Xa,{to:"/collections/containsStrict.html"},{default:(0,n.w5)((()=>[re])),_:1})]),ge]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",ye,[(0,n.Wm)(Xa,{to:"/collections/concat.html"},{default:(0,n.w5)((()=>[ke])),_:1})]),he]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",xe,[(0,n.Wm)(Xa,{to:"/collections/combine.html"},{default:(0,n.w5)((()=>[Ue])),_:1})]),we]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",_e,[(0,n.Wm)(Xa,{to:"/collections/chuck.html"},{default:(0,n.w5)((()=>[be])),_:1})]),ve]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Ee,[(0,n.Wm)(Xa,{to:"/collections/collapse.html"},{default:(0,n.w5)((()=>[Se])),_:1})]),Ie]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Be,[(0,n.Wm)(Xa,{to:"/collections/min.html"},{default:(0,n.w5)((()=>[Ne])),_:1})]),Ce]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",qe,[(0,n.Wm)(Xa,{to:"/collections/median.html"},{default:(0,n.w5)((()=>[je])),_:1})]),Je]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Ke,[(0,n.Wm)(Xa,{to:"/collections/max.html"},{default:(0,n.w5)((()=>[Ae])),_:1})]),De]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Re,[(0,n.Wm)(Xa,{to:"/collections/avg.html"},{default:(0,n.w5)((()=>[Pe])),_:1})]),Te]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Le,[(0,n.Wm)(Xa,{to:"/collections/avg.html"},{default:(0,n.w5)((()=>[Oe])),_:1})]),$e]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",ze,[(0,n.Wm)(Xa,{to:"/collections/every.html"},{default:(0,n.w5)((()=>[Me])),_:1})]),Ge]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",He,[(0,n.Wm)(Xa,{to:"/collections/except.html"},{default:(0,n.w5)((()=>[Ye])),_:1})]),Fe]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Qe,[(0,n.Wm)(Xa,{to:"/collections/flatMap.html"},{default:(0,n.w5)((()=>[Ve])),_:1})]),Xe]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Ze,[(0,n.Wm)(Xa,{to:"/collections/flatten.html"},{default:(0,n.w5)((()=>[tn])),_:1})]),ln]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",en,[(0,n.Wm)(Xa,{to:"/collections/flip.html"},{default:(0,n.w5)((()=>[nn])),_:1})]),sn]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",an,[(0,n.Wm)(Xa,{to:"/collections/forget.html"},{default:(0,n.w5)((()=>[mn])),_:1})]),on]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",cn,[(0,n.Wm)(Xa,{to:"/collections/forPage.html"},{default:(0,n.w5)((()=>[Wn])),_:1})]),un]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",dn,[(0,n.Wm)(Xa,{to:"/collections/get.html"},{default:(0,n.w5)((()=>[fn])),_:1})]),pn]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",rn,[(0,n.Wm)(Xa,{to:"/collections/has.html"},{default:(0,n.w5)((()=>[gn])),_:1})]),yn]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",kn,[(0,n.Wm)(Xa,{to:"/collections/implode.html"},{default:(0,n.w5)((()=>[hn])),_:1})]),xn]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Un,[(0,n.Wm)(Xa,{to:"/collections/intersect.html"},{default:(0,n.w5)((()=>[wn])),_:1})]),_n]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",bn,[(0,n.Wm)(Xa,{to:"/collections/intersectByKeys.html"},{default:(0,n.w5)((()=>[vn])),_:1})]),En]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Sn,[(0,n.Wm)(Xa,{to:"/collections/keyBy.html"},{default:(0,n.w5)((()=>[In])),_:1})]),Bn]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Nn,[(0,n.Wm)(Xa,{to:"/collections/keys.html"},{default:(0,n.w5)((()=>[Cn])),_:1})]),qn]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",jn,[(0,n.Wm)(Xa,{to:"/collections/merge.html"},{default:(0,n.w5)((()=>[Jn])),_:1})]),Kn]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",An,[(0,n.Wm)(Xa,{to:"/collections/mergeRecursive.html"},{default:(0,n.w5)((()=>[Dn])),_:1})]),Rn]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Pn,[(0,n.Wm)(Xa,{to:"/collections/mode.html"},{default:(0,n.w5)((()=>[Tn])),_:1})]),(0,n.Wm)("td",Ln,[On,$n,zn,(0,n.Wm)("a",Mn,[Gn,(0,n.Wm)(e)])])]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Hn,[(0,n.Wm)(Xa,{to:"/collections/partition.html"},{default:(0,n.w5)((()=>[Yn])),_:1})]),Fn]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Qn,[(0,n.Wm)(Xa,{to:"/collections/pipe.html"},{default:(0,n.w5)((()=>[Vn])),_:1})]),Xn]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Zn,[(0,n.Wm)(Xa,{to:"/collections/pipeInto.html"},{default:(0,n.w5)((()=>[ts])),_:1})]),ls]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",es,[(0,n.Wm)(Xa,{to:"/collections/pop.html"},{default:(0,n.w5)((()=>[ns])),_:1})]),ss]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",as,[(0,n.Wm)(Xa,{to:"/collections/prepend.html"},{default:(0,n.w5)((()=>[ms])),_:1})]),os]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",is,[(0,n.Wm)(Xa,{to:"/collections/pull.html"},{default:(0,n.w5)((()=>[cs])),_:1})]),Ws]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",us,[(0,n.Wm)(Xa,{to:"/collections/push.html"},{default:(0,n.w5)((()=>[ds])),_:1})]),fs]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",ps,[(0,n.Wm)(Xa,{to:"/collections/put.html"},{default:(0,n.w5)((()=>[rs])),_:1})]),gs]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",ys,[(0,n.Wm)(Xa,{to:"/collections/random.html"},{default:(0,n.w5)((()=>[ks])),_:1})]),hs]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",xs,[(0,n.Wm)(Xa,{to:"/collections/reduce.html"},{default:(0,n.w5)((()=>[Us])),_:1})]),ws]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",_s,[(0,n.Wm)(Xa,{to:"/collections/reject.html"},{default:(0,n.w5)((()=>[bs])),_:1})]),vs]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Es,[(0,n.Wm)(Xa,{to:"/collections/search.html"},{default:(0,n.w5)((()=>[Ss])),_:1})]),Is]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Bs,[(0,n.Wm)(Xa,{to:"/collections/shift.html"},{default:(0,n.w5)((()=>[Ns])),_:1})]),Cs]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",qs,[(0,n.Wm)(Xa,{to:"/collections/shuffle.html"},{default:(0,n.w5)((()=>[js])),_:1})]),Js]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Ks,[(0,n.Wm)(Xa,{to:"/collections/skip.html"},{default:(0,n.w5)((()=>[As])),_:1})]),Ds]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Rs,[(0,n.Wm)(Xa,{to:"/collections/skipUntil.html"},{default:(0,n.w5)((()=>[Ps])),_:1})]),Ts]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Ls,[(0,n.Wm)(Xa,{to:"/collections/skipWhile.html"},{default:(0,n.w5)((()=>[Os])),_:1})]),$s]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",zs,[(0,n.Wm)(Xa,{to:"/collections/slice.html"},{default:(0,n.w5)((()=>[Ms])),_:1})]),Gs]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Hs,[(0,n.Wm)(Xa,{to:"/collections/contains.html"},{default:(0,n.w5)((()=>[Ys])),_:1})]),(0,n.Wm)("td",Fs,[(0,n.Wm)(Xa,{to:"/collections/contains.html"},{default:(0,n.w5)((()=>[Qs])),_:1}),Vs])]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Xs,[(0,n.Wm)(Xa,{to:"/collections/splice.html"},{default:(0,n.w5)((()=>[Zs])),_:1})]),ta]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",la,[(0,n.Wm)(Xa,{to:"/collections/split.html"},{default:(0,n.w5)((()=>[ea])),_:1})]),na]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",sa,[(0,n.Wm)(Xa,{to:"/collections/splitIn.html"},{default:(0,n.w5)((()=>[aa])),_:1})]),ma]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",oa,[(0,n.Wm)(Xa,{to:"/collections/sum.html"},{default:(0,n.w5)((()=>[ia])),_:1})]),ca]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Wa,[(0,n.Wm)(Xa,{to:"/collections/transform.html"},{default:(0,n.w5)((()=>[ua])),_:1})]),da]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",fa,[(0,n.Wm)(Xa,{to:"/collections/union.html"},{default:(0,n.w5)((()=>[pa])),_:1})]),ra]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",ga,[(0,n.Wm)(Xa,{to:"/collections/unique.html"},{default:(0,n.w5)((()=>[ya])),_:1})]),ka]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",ha,[(0,n.Wm)(Xa,{to:"/collections/uniqueStrict.html"},{default:(0,n.w5)((()=>[xa])),_:1})]),Ua]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",wa,[(0,n.Wm)(Xa,{to:"/collections/unless.html"},{default:(0,n.w5)((()=>[_a])),_:1})]),ba]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",va,[(0,n.Wm)(Xa,{to:"/collections/whenNotEmpty.html"},{default:(0,n.w5)((()=>[Ea])),_:1})]),(0,n.Wm)("td",Sa,[(0,n.Wm)(Xa,{to:"/collections/whenNotEmpty.html"},{default:(0,n.w5)((()=>[Ia])),_:1}),Ba])]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Na,[(0,n.Wm)(Xa,{to:"/collections/whenEmpty.html"},{default:(0,n.w5)((()=>[Ca])),_:1})]),(0,n.Wm)("td",qa,[(0,n.Wm)(Xa,{to:"/collections/whenEmpty.html"},{default:(0,n.w5)((()=>[ja])),_:1}),Ja])]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Ka,[(0,n.Wm)(Xa,{to:"/collections/values.html"},{default:(0,n.w5)((()=>[Aa])),_:1})]),Da]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",Ra,[(0,n.Wm)(Xa,{to:"/collections/when.html"},{default:(0,n.w5)((()=>[Pa])),_:1})]),Ta]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",La,[(0,n.Wm)(Xa,{to:"/collections/whenEmpty.html"},{default:(0,n.w5)((()=>[Oa])),_:1})]),$a]),(0,n.Wm)("tr",null,[(0,n.Wm)("td",za,[(0,n.Wm)(Xa,{to:"/collections/whenNotEmpty.html"},{default:(0,n.w5)((()=>[Ma])),_:1})]),Ga])])]),Ha,(0,n.Wm)("p",null,[Ya,(0,n.Wm)("a",Fa,[Qa,(0,n.Wm)(e)]),Va])],64)}}}}]);