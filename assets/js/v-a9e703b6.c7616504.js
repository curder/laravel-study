(self.webpackChunklaravel_study=self.webpackChunklaravel_study||[]).push([[3839],{7308:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-a9e703b6",path:"/collections/each.html",title:"each",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"each 循环获取二维数组",slug:"each-循环获取二维数组",children:[]}],filePathRelative:"collections/each.md",git:{updatedTime:1616865921e3,contributors:[]}}},2305:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>T});var p=a(6252);const e=(0,p.uE)('<h1 id="each"><a class="header-anchor" href="#each">#</a> each</h1><p>迭代集合中的内容，<strong>不改变原集合</strong>的同时将其传递到回调函数中。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;The current value is ${value}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// output</span>\n<span class="token doc-comment comment">/**\n&quot;The current value is 1&quot;\n&quot;The current value is 2&quot;\n&quot;The current value is 3&quot;\n&quot;The current value is 4&quot;\nIlluminate\\Support\\Collection <span class="token punctuation">{</span>#1223\n all: [\n   1,\n   2,\n   3,\n   4,\n ],\n<span class="token punctuation">}</span>\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',3),t=(0,p.Uk)("不要尝试在回调函数中直接调用 "),o=(0,p.Wm)("code",null,"return",-1),l=(0,p.Uk)(" 改变集合，因为each方法不会改变原集合。如果需要执行改变原数组的话可以使用 "),u={href:"/collections/map.md",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("map"),r=(0,p.Uk)(" 方法。例如："),i=(0,p.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// 请使用 map 代替 each 方法</span>\n<span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">&quot;The current value is ${value}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',1),b=(0,p.uE)('<p>如果要中断对内容的迭代，那就从回调中返回 <code>false</code>，如下示例：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$value</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;The current value is ${value}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// output</span>\n<span class="token doc-comment comment">/**\n&quot;The current value is 1&quot;\n&quot;The current value is 2&quot;\n=&gt; Illuminate\\Support\\Collection <span class="token punctuation">{</span>#1231\n     all: [\n       1,\n       2,\n       3,\n       4,\n     ],\n   <span class="token punctuation">}</span>\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><blockquote><p>可以看到当触发条件返回<code>false</code>后的循环停止了。</p></blockquote><h2 id="each-循环获取二维数组"><a class="header-anchor" href="#each-循环获取二维数组">#</a> each 循环获取二维数组</h2><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;banners&quot;</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;California&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;apples&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Florida&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;coconuts&quot;</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Texas&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;We have <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> in our <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> store.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// output</span>\n<span class="token doc-comment comment">/**\n&quot;We have 45 banners in our California store.&quot;\n&quot;We have 20 apples in our Florida store.&quot;\n&quot;We have 60 coconuts in our Texas store.&quot;\n=&gt; Illuminate\\Support\\Collection <span class="token punctuation">{</span>#1251\n     all: [\n       [\n         &quot;banners&quot;,\n         45,\n         &quot;California&quot;,\n       ],\n       [\n         &quot;apples&quot;,\n         20,\n         &quot;Florida&quot;,\n       ],\n       [\n         &quot;coconuts&quot;,\n         60,\n         &quot;Texas&quot;,\n       ],\n     ],\n   <span class="token punctuation">}</span>\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div>',5),k=(0,p.Wm)("p",null,"在循环的回调函数中通过下标获取对应值的方式不是很优雅，可能过了一段时间就忘了对应的值是什么。",-1),m=(0,p.Uk)("有没有更加优雅的方式优化这个问题呢？使用 "),d={href:"/collections/eachSpread.md",target:"_blank",rel:"noopener noreferrer"},q=(0,p.Uk)("eachSpread"),h=(0,p.Uk)(" 方法。"),g=(0,p.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;banners&quot;</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;California&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;apples&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Florida&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string double-quoted-string">&quot;coconuts&quot;</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Texas&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">eachSpread</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$product</span><span class="token punctuation">,</span> <span class="token variable">$qty</span><span class="token punctuation">,</span> <span class="token variable">$location</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">dump</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;We have <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$product</span><span class="token punctuation">}</span></span> <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$qty</span><span class="token punctuation">}</span></span> in our <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$location</span><span class="token punctuation">}</span></span> store.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// output</span>\n<span class="token doc-comment comment">/**\n&quot;We have banners 45 in our California store.&quot;\n&quot;We have apples 20 in our Florida store.&quot;\n&quot;We have coconuts 60 in our Texas store.&quot;\n=&gt; Illuminate\\Support\\Collection <span class="token punctuation">{</span>#1249\n     all: [\n       [\n         &quot;banners&quot;,\n         45,\n         &quot;California&quot;,\n       ],\n       [\n         &quot;apples&quot;,\n         20,\n         &quot;Florida&quot;,\n       ],\n       [\n         &quot;coconuts&quot;,\n         60,\n         &quot;Texas&quot;,\n       ],\n     ],\n   <span class="token punctuation">}</span>\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div>',1),v=(0,p.Uk)("可以看到通过调用 "),f={href:"/collections/eachSpread.md",target:"_blank",rel:"noopener noreferrer"},W=(0,p.Uk)("eachSpread"),$=(0,p.Uk)(" 方法，在回调函数中有更明确的变量可供使用，变得更加有寓意话。"),T={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[e,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[t,o,l,(0,p.Wm)("a",u,[c,(0,p.Wm)(a)]),r]),i]),b,(0,p.Wm)("blockquote",null,[k,(0,p.Wm)("p",null,[m,(0,p.Wm)("a",d,[q,(0,p.Wm)(a)]),h])]),g,(0,p.Wm)("blockquote",null,[(0,p.Wm)("p",null,[v,(0,p.Wm)("a",f,[W,(0,p.Wm)(a)]),$])])],64)}}}}]);