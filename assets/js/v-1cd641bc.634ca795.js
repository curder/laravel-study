(self.webpackChunklaravel_study=self.webpackChunklaravel_study||[]).push([[858],{2347:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-1cd641bc",path:"/others/laravel-create-custom-facade-test-demo.html",title:"Laravel 创建自定义 Facade",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"安装Laravle",slug:"安装laravle",children:[]},{level:2,title:"创建实现类",slug:"创建实现类",children:[]},{level:2,title:"创建门面",slug:"创建门面",children:[]},{level:2,title:"创建测试",slug:"创建测试",children:[]},{level:2,title:"参考地址",slug:"参考地址",children:[]}],filePathRelative:"others/laravel-create-custom-facade-test-demo.md",git:{updatedTime:1618554432e3,contributors:[]}}},5511:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>v});var e=a(6252);const p=(0,e.Wm)("h1",{id:"laravel-创建自定义-facade"},[(0,e.Wm)("a",{class:"header-anchor",href:"#laravel-创建自定义-facade"},"#"),(0,e.Uk)(" Laravel 创建自定义 Facade")],-1),t={href:"https://github.com/curder/laravel-create-custom-facade-test-demo/actions?query=run-test%3Amaster",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Wm)("img",{src:"https://github.com/curder/laravel-create-custom-facade-test-demo/actions/workflows/run-test.yml/badge.svg",alt:"GitHub Tests Action Status"},null,-1),o={href:"https://github.com/curder/laravel-create-custom-facade-test-demo/actions?query=workflow%3A%22Check+%26+fix+styling%22+branch%3Amaster",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Wm)("img",{src:"https://github.com/curder/laravel-create-custom-facade-test-demo/actions/workflows/php-cs-fixer.yml/badge.svg",alt:"GitHub Code Style Action Status"},null,-1),r={href:"https://github.com/curder/laravel-create-custom-facade-test-demo",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("GitHub 源代码"),i=(0,e.Uk)("在 Laravel 应用程序中，"),k={href:"https://laravel.com/docs/8.x/facades",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("Facade"),b=(0,e.Uk)(" 是提供从容器访问对象的类。"),d=(0,e.uE)('<p>Laravel 的外观以及您创建的任何自定义外观都将扩展基础 <code>Illuminate\\Support\\Facades\\Facade</code> 类。</p><p>Laravel 提供默认的外观，例如 <code>Route</code>，<code>Redirect</code>，<code>Cookie</code>，<code>App</code>，<code>Crypt</code>等。</p><p>如果要为自己的应用程序创建 <code>Facade</code> ，只需遵循以下步骤：</p><h2 id="安装laravle"><a class="header-anchor" href="#安装laravle">#</a> 安装Laravle</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">composer</span> create-project laravel/laravel laravel-create-custom-facade-test-demo -vvv\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="创建实现类"><a class="header-anchor" href="#创建实现类">#</a> 创建实现类</h2><p>这里举例实现类放在 <code>app/Services</code>目录下。类的内容如下：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Services</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Carbon<span class="token punctuation">\\</span>Carbon</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Class DateFormatService\n *\n * <span class="token keyword">@package</span> <span class="token class-name">App<span class="token punctuation">\\</span>Services</span>\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">DateFormatService</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">|</span>Carbon</span> <span class="token parameter">$date</span>\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">string</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">dateFormatYMD</span><span class="token punctuation">(</span><span class="token variable">$date</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name static-context">Carbon</span><span class="token operator">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token variable">$date</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">|</span>Carbon</span> <span class="token parameter">$date</span>\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">string</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">dateFormatMDY</span><span class="token punctuation">(</span><span class="token variable">$date</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name static-context">Carbon</span><span class="token operator">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token variable">$date</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;m/d/Y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="创建门面"><a class="header-anchor" href="#创建门面">#</a> 创建门面</h2><p>在 <code>app\\Services\\Facades</code>目录下创建对应文件如下：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Services<span class="token punctuation">\\</span>Facades</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Services<span class="token punctuation">\\</span>DateFormatService</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Facade</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@method</span> static string dateFormatMDY(string|mixed $date)\n * <span class="token keyword">@method</span> static string dateFormatYMD(string|mixed $date)\n *\n * <span class="token keyword">@see</span> DateFormatService\n */</span>\n<span class="token keyword">class</span> <span class="token class-name">DateFormatFacade</span> <span class="token keyword">extends</span> <span class="token class-name">Facade</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getFacadeAccessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name static-context">DateFormatService</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="创建测试"><a class="header-anchor" href="#创建测试">#</a> 创建测试</h2><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">Tests<span class="token punctuation">\\</span>Unit</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Services<span class="token punctuation">\\</span>DateFormatService</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Services<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>DateFormatFacade</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\\</span>TestCase</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">DateFormatFacadeTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/** <span class="token keyword">@test</span> */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">it_can_run_methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateFormatService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">dateFormatMDY</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;2021-04-16&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;04/16/2021&quot;</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateFormatService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">dateFormatYMD</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;04/16/2021&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;2021-04-16&quot;</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/** <span class="token keyword">@test</span> */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">it_can_use_date_format_facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">DateFormatFacade</span><span class="token operator">::</span><span class="token function">dateFormatMDY</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;2021-04-16&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;04/16/2021&quot;</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">DateFormatFacade</span><span class="token operator">::</span><span class="token function">dateFormatYMD</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;04/16/2021&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;2021-04-16&quot;</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/** <span class="token keyword">@test</span> */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">it_can_use_carbon_instance_date_format_facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">DateFormatFacade</span><span class="token operator">::</span><span class="token function">dateFormatMDY</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;m/d/Y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token class-name static-context">DateFormatFacade</span><span class="token operator">::</span><span class="token function">dateFormatYMD</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h2 id="参考地址"><a class="header-anchor" href="#参考地址">#</a> 参考地址</h2>',14),g={href:"https://www.itsolutionstuff.com/post/laravel-create-custom-facade-exampleexample.html",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("Laravel Create Custom Facade Class Example"),v={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[(0,e.Wm)("a",t,[c,(0,e.Wm)(a)]),(0,e.Wm)("a",o,[l,(0,e.Wm)(a)])]),(0,e.Wm)("p",null,[(0,e.Wm)("a",r,[u,(0,e.Wm)(a)])]),(0,e.Wm)("p",null,[i,(0,e.Wm)("a",k,[m,(0,e.Wm)(a)]),b]),d,(0,e.Wm)("ul",null,[(0,e.Wm)("li",null,[(0,e.Wm)("a",g,[h,(0,e.Wm)(a)])])])],64)}}}}]);