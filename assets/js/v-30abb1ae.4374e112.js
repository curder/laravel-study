(self.webpackChunklaravel_study=self.webpackChunklaravel_study||[]).push([[1218],{7104:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-30abb1ae",path:"/model/laravel-model-events.html",title:"模型事件",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"数据准备",slug:"数据准备",children:[]},{level:2,title:"模型内容",slug:"模型内容",children:[]},{level:2,title:"对数据的增删改操作",slug:"对数据的增删改操作",children:[{level:3,title:"增加",slug:"增加",children:[]},{level:3,title:"删除",slug:"删除",children:[]},{level:3,title:"更新",slug:"更新",children:[]}]},{level:2,title:"事件模型的退出",slug:"事件模型的退出",children:[]}],filePathRelative:"model/laravel-model-events.md",git:{updatedTime:1617169109e3,contributors:[]}}},8489:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="模型事件"><a class="header-anchor" href="#模型事件">#</a> 模型事件</h1><p>Eloquent支持模型事件 —— 当模型被创建、更新或删除的时候触发相应事件。</p><p>目前使用Laravel版本是5.5，Eloquent目前支持10种事件类型：<code>creating</code>、<code>created</code>、<code>updating</code>、<code>updated</code>、<code>saving</code>、<code>saved</code>、<code>deleting</code>、<code>deleted</code>、<code>restoring</code>和<code>restored</code>。</p><p><code>deleting</code>和<code>deleted</code>很好理解，在删除模型时触发；<code>deleting</code>在删除操作前执行，<code>deleted</code>在删除完成后执行。</p><p>当创建模型时，依次执行<code>saving</code>、<code>creating</code>、<code>created</code>和<code>saved</code>，同理在更新模型时依次执行<code>saving</code>、<code>updating</code>、<code>updated</code>和<code>saved</code>。</p><p>当恢复软删除的数据时，将依次触发<code>restoring</code>、<code>saving</code>、<code>updating</code>、<code>saved</code>和<code>restored</code>事件。</p><p>无论是使用批量赋值（<code>create</code>/<code>update</code>）还是直接调用<code>save</code>方法，都会触发对应事件（前提是注册了相应的模型事件）。</p><p>这里我们选择在当前 <code>\\App\\Models\\Post</code> 模型类的 <code>boot</code> 方法里面注册(当然，也可以选择在服务提供者 <code>AppServiceProvider</code> 的 <code>boot</code> 方法中注册)。</p><h2 id="数据准备"><a class="header-anchor" href="#数据准备">#</a> 数据准备</h2><p>命令行执行如下命令：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>laravel new model-events\n<span class="token builtin class-name">cd</span> model-events\nphp artisan make:model Post -m\n<span class="token function">touch</span> database/database.sqlite\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>上面的命令会创建一个Laravel项目并创建一个Post模型文件和对应的迁移文件与数据库配置文件。</p></blockquote><p>修改项目本地环境文件<code>.env</code>文件中的数据库连接</p><div class="language-dotenv ext-dotenv line-numbers-mode"><pre class="language-dotenv"><code>DB_CONNECTION=sqlite\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>修改数据库迁移文件<code>database\\migrations\\****_**_**_******_create_posts_table.php</code>中的 <code>up()</code>方法</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">increments</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">softDeletes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">timestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>修改好迁移文件之后，执行迁移</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>php artisan migrate\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="模型内容"><a class="header-anchor" href="#模型内容">#</a> 模型内容</h2><p>我们使用上面提到的 10 种模型事件进行测试。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Models</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>SoftDeletes</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Post</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">use</span> <span class="token package">SoftDeletes</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">protected</span> <span class="token variable">$fillable</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;body&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n    <span class="token comment">// 新增模型数据触发</span>\n    <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">creating</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;creating event is fired\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 新增模型数据触发</span>\n    <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;created event is fired\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 编辑模型数据触发</span>\n    <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">updating</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;updating event is fired\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 编辑模型数据触发</span>\n    <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">updated</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;updated event is fired\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 新增、编辑模型数据触发</span>\n    <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">saving</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;saving event is fired\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 新增、编辑模型数据触发</span>\n    <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">saved</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;saved event is fired\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 删除模型数据触发</span>\n    <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">deleting</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;deleting event is fired\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 删除模型数据触发</span>\n    <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">deleted</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;deleted event is fired\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">restoring</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;restoring event is fired\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">restored</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;restored event is fired\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div><blockquote><p>其中 <code>restoring</code> 和 <code>restored</code> 事件需要模型 <code>use Illuminate\\Database\\Eloquent\\SoftDeletes;</code> 才能正常使用。</p></blockquote><h2 id="对数据的增删改操作"><a class="header-anchor" href="#对数据的增删改操作">#</a> 对数据的增删改操作</h2><h3 id="增加"><a class="header-anchor" href="#增加">#</a> 增加</h3><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Post</span><span class="token punctuation">;</span>\n\n<span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span><span class="token string single-quoted-string">&#39;body&#39;</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">&#39;body&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\nsaving event is fired\ncreating event is fired\ncreated event is fired\nsaved event is fired\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>通过执行上面的代码我们可以看到，执行模型 <code>create()</code> 方法，会依次触发 <code>saving</code> 、 <code>creating</code> 、 <code>created</code> 和 <code>saved</code> 事件。</p></blockquote><h3 id="删除"><a class="header-anchor" href="#删除">#</a> 删除</h3><ul><li><strong>软删除</strong></li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Post</span><span class="token punctuation">;</span>\n\n<span class="token variable">$post</span> <span class="token operator">=</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">latest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Post</span><span class="token operator">::</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\ndeleting event is fired\ndeleted event is fired  \n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>通过执行上面的删除代码，我们可以看到会依次触发 <code>deleting</code> 和 <code>deleted</code> 事件。</p></blockquote><ul><li><strong>恢复删除</strong></li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Post</span><span class="token punctuation">;</span>\n\n<span class="token variable">$post</span> <span class="token operator">=</span> <span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">latest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$post</span><span class="token operator">-&gt;</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\nrestoring event is fired\nsaving event is fired\nupdating event is fired\nupdated event is fired\nsaved event is fired\nrestored event is fired\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>通过执行上面的恢复删除代码，可以依次触发了<code>restoring</code>、<code>saving</code>、<code>updating</code>、<code>updated</code>、<code>saved</code>和<code>restored</code>事件中的代码</p></blockquote><h3 id="更新"><a class="header-anchor" href="#更新">#</a> 更新</h3><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Post</span><span class="token punctuation">;</span>\n\n<span class="token variable">$post</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Post</span><span class="token operator">::</span><span class="token function">latest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$post</span><span class="token operator">-&gt;</span><span class="token property">title</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;title Update&#39;</span><span class="token punctuation">;</span>\n<span class="token variable">$post</span><span class="token operator">-&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\nsaving event is fired\nupdating event is fired\nupdated event is fired\nsaved event is fired\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p>通过执行上面的代码，我们可以看到会依次触发<code>saving</code> 、<code>updating</code> 、<code>updated</code> 和 <code>saved</code> 事件。</p></blockquote><h2 id="事件模型的退出"><a class="header-anchor" href="#事件模型的退出">#</a> 事件模型的退出</h2><blockquote><p><strong>注意:</strong> 如果 <code>saving</code> 、 <code>creating</code> 、 <code>updating</code> 、 <code>deleting</code> 、 <code>restoring</code> 事件逻辑中返回 <code>false</code> ，则相应的创建/更新/删除操作会退出，不再往下执行。</p></blockquote><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">creating</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;creating event is fired&lt;br&gt;&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$post</span><span class="token operator">-&gt;</span><span class="token property">title</span> <span class="token operator">==</span> <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Post</span><span class="token punctuation">;</span>\n\n<span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span><span class="token string single-quoted-string">&#39;body&#39;</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">&#39;body&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\nsaving event is fired\ncreating event is fired\n */</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>有了模型事件之后，我们就很方便地在模型创建、更新或删除的不同生命周期阶段添加相应的业务逻辑。</p>',41),p={render:function(n,s){return e}}}}]);