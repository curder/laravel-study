(self.webpackChunklaravel_study=self.webpackChunklaravel_study||[]).push([[4987],{3927:(e,n,s)=>{"use strict";s.r(n),s.d(n,{data:()=>a});const a={key:"v-0c063464",path:"/others/laravel_test.html",title:"Laravel测试",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"测试前的准备",slug:"测试前的准备",children:[{level:3,title:"安装Laravel",slug:"安装laravel",children:[]},{level:3,title:"安装依赖",slug:"安装依赖",children:[]},{level:3,title:"修改配置",slug:"修改配置",children:[]}]},{level:2,title:"针对Model进行测试",slug:"针对model进行测试",children:[{level:3,title:"测试前的准备",slug:"测试前的准备-1",children:[]},{level:3,title:"新增并修改测试文件",slug:"新增并修改测试文件",children:[]}]},{level:2,title:"使用Repository模式",slug:"使用repository模式",children:[{level:3,title:"新建Repository文件",slug:"新建repository文件",children:[]},{level:3,title:"建立Repository测试文件",slug:"建立repository测试文件",children:[]}]},{level:2,title:"Reference",slug:"reference",children:[]}],filePathRelative:"others/laravel_test.md",git:{updatedTime:1617071687e3,contributors:[]}}},1706:(e,n,s)=>{"use strict";s.r(n),s.d(n,{default:()=>t});var a=s(6252);const l=(0,a.uE)('<h1 id="laravel测试"><a class="header-anchor" href="#laravel测试">#</a> Laravel测试</h1><ul><li>Laravel 5.4.24</li></ul><h2 id="测试前的准备"><a class="header-anchor" href="#测试前的准备">#</a> 测试前的准备</h2><h3 id="安装laravel"><a class="header-anchor" href="#安装laravel">#</a> 安装Laravel</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>composer create-project laravel/laravel testing-laravel\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="安装依赖"><a class="header-anchor" href="#安装依赖">#</a> 安装依赖</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>composer require mockery/mockery --dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="修改配置"><a class="header-anchor" href="#修改配置">#</a> 修改配置</h3><p>修改 <code>phpunit.xml</code> 定义测试数据库</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;env name=&quot;DB_CONNECTION&quot; value=&quot;sqlite&quot;/&gt;\n&lt;env name=&quot;DB_DATABASE&quot; value=&quot;:memory:&quot;/&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>使用<code>sqlite</code>的连接方式，使用<code>memory</code>进行数据存储。</p></blockquote><h2 id="针对model进行测试"><a class="header-anchor" href="#针对model进行测试">#</a> 针对Model进行测试</h2><h3 id="测试前的准备-1"><a class="header-anchor" href="#测试前的准备-1">#</a> 测试前的准备</h3><ul><li>建立数据库模型和数据库迁移文件</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>php artisan make:model Article -m\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>编辑迁移文件</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public function up()\n{\n    Schema::create(&#39;articles&#39;, function (Blueprint $table) {\n        $table-&gt;increments(&#39;id&#39;);\n        $table-&gt;string(&#39;title&#39;);\n        $table-&gt;text(&#39;body&#39;);\n        $table-&gt;timestamps();\n    });\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>修改ModelFactory</li></ul><p>文件在<code>databases\\factories\\ModelFactory.php</code></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$factory-&gt;define(App\\Article::class, function (Faker\\Generator $faker) {\n    return [\n        &#39;name&#39; =&gt; $faker-&gt;name,\n        &#39;body&#39; =&gt; $faker-&gt;sentence,\n    ];\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>修改模型文件</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>namespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Article extends Model\n{\n    // 定义使用 __construct($data) 或 create($data) 时，可以被修改的字段，从而保证其他字段不被修改\n    protected $fillable = [&#39;title&#39;, &#39;body&#39;];\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="新增并修改测试文件"><a class="header-anchor" href="#新增并修改测试文件">#</a> 新增并修改测试文件</h3><ul><li>测试有没有文章</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>use Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n\nclass ArticleTest extends TestCase\n{\n    use DatabaseMigrations;\n\n    /** @test */\n    public function the_articles_is_empty_result()\n    {\n        // 取得所有文章\n        $articles = Article::all();\n\n        // 确认 $articles 是 Collection\n        $this-&gt;assertInstanceOf(Collection::class, $articles);\n\n        // 而文章数量为 0\n        $this-&gt;assertCount(0, $articles);\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li>测试新增数据并列出数据</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>use App\\Article;\n\nclass ArticleTest extends TestCase\n{\n    // ...\n    \n    /** @test */\n    public function the_articles_create_and_list_the_data()\n    {\n      // 新增 10 条记录\n      for ($i = 1; $i &lt;= 10; $i++) {\n        factory(Article::class,10)-&gt;make([\n            &#39;name&#39; =&gt; &#39;name &#39; . $i,\n            &#39;body&#39; =&gt; &#39;body &#39; . $i\n        ]);\n      }\n\n      // 确认数据库中有10条记录\n      $articles = Article::all();\n      $this-&gt;assertCount(10, $articles);\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><blockquote><p>在实际使用Laravel项目中，我们常常不会直接通过Controller向模型获取数据，而是会使用到Repository的开发模式，那么如何测试Repository呢？</p></blockquote><h2 id="使用repository模式"><a class="header-anchor" href="#使用repository模式">#</a> 使用Repository模式</h2><h3 id="新建repository文件"><a class="header-anchor" href="#新建repository文件">#</a> 新建Repository文件</h3><p><code>app/Repositories/ArticleRepository.php</code></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?php\n\nnamespace App\\Repositories;\n\n/**\n * Class ArticleRepository\n * @package App\\Repositories\n * @method latest($limit)\n * @method create($attributes = array())\n */\nclass ArticleRepository\n{\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>先建立一个空的Repository文件，后期在测试的过程中添加方法。</p></blockquote><h3 id="建立repository测试文件"><a class="header-anchor" href="#建立repository测试文件">#</a> 建立Repository测试文件</h3><h4 id="测试repository查询"><a class="header-anchor" href="#测试repository查询">#</a> 测试Repository查询</h4><ul><li>建立文件并编写测试代码，文件在<code>tests/Feature/ArticleRepositoryTest.php</code></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?php\n\nnamespace Tests\\Feature;\n\nuse App\\Article;\nuse App\\Repositories\\ArticleRepository;\nuse Tests\\TestCase;\nuse Illuminate\\Foundation\\Testing\\DatabaseMigrations;\n\nclass ArticleRepositoryTest extends TestCase\n{\n    use DatabaseMigrations;\n\n    /**\n     * @var ArticleRepository\n     */\n    protected $repository;\n\n    protected function setUp()\n    {\n        parent::setUp();\n        // 填充数据\n        $this-&gt;repository = new ArticleRepository();\n    }\n    \n    // 测试获取最后的10条资料\n    /** @test */\n    public function fetch_latest_10_articles()\n    {\n        // given data.\n        for ($i = 1; $i &lt;= 100; $i++) {\n            factory(Article::class)-&gt;create([\n                &#39;name&#39; =&gt; &#39;name &#39; . $i,\n                &#39;body&#39; =&gt; &#39;body &#39; . $i,\n            ]);\n        }\n\n        // 从 repository 中取得最新 10 条数据\n        $articles = $this-&gt;repository-&gt;latest(10)-&gt;get();\n        $this-&gt;assertCount(10, $articles);\n\n        // 确认标题是从 100 .. 91 倒数\n        // &quot;title 100&quot; .. &quot;title 91&quot;\n        $i = 10;\n        /** @var \\App\\Article[] $articles */\n        foreach ($articles as $article) {\n            $this-&gt;assertEquals(&#39;name &#39; . $i, $article-&gt;name);\n            --$i;\n        }\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><ul><li>抛出错误并修复</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Error: Call to undefined method App\\Repositories\\ArticleRepository::latest()\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol><li>先向Repository中添加<code>latest()</code>方法</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public function latest10()\n{\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>执行phpunit报错。 <code>Error: Call to a member function get() on null</code></p></blockquote><ol start="2"><li>再向Repository添加<code>latest()</code>方法</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/**\n * @param int $limit\n * @return ArticleRepository|\\Illuminate\\Database\\Eloquent\\Builder\n */\npublic function latest($limit)\n{\n    return Article::query()-&gt;orderBy(&#39;id&#39;, &#39;desc&#39;)-&gt;limit($limit);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>此时测试通过。</p></blockquote><h4 id="测试repository添加操作"><a class="header-anchor" href="#测试repository添加操作">#</a> 测试Repository添加操作</h4><ol><li>编写测试代码</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/** @test */\npublic function create_article()\n{\n\n    $article = $this-&gt;repository-&gt;create([\n        &#39;name&#39; =&gt; &#39;name&#39;,\n        &#39;body&#39; =&gt; &#39;body&#39;,\n    ]);\n\n    $this-&gt;assertEquals(1, $article-&gt;id);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>抛出如下错误:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Error: Call to undefined method App\\Repositories\\ArticleRepository::create()\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>修改Repository中代码，新增<code>create()</code>方法：</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>use App\\Article;\n\npublic function create()\n{\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>抛出如下错误：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>ErrorException: Trying to get property of non-object\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>修改Repository中<code>create()</code>方法，添加逻辑代码：</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>use App\\Article;\n\n /**\n * Create new data.\n * @param array $attributes\n * @return mixed\n */\npublic function create(array $attributes = array())\n{\n    return Article::create($attributes);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>以上测试过程即为TDD测试流程</p></blockquote><h2 id="reference"><a class="header-anchor" href="#reference">#</a> Reference</h2>',58),r={href:"https://gist.github.com/jaceju/c415c1b42daf4c589f2a",target:"_blank",rel:"noopener noreferrer"},i=(0,a.Uk)("Web Development with Laravel 5"),t={render:function(e,n){const s=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.j4)(a.HY,null,[l,(0,a.Wm)("p",null,[(0,a.Wm)("a",r,[i,(0,a.Wm)(s)])])],64)}}}}]);