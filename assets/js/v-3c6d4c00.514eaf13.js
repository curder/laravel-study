(self.webpackChunklaravel_study=self.webpackChunklaravel_study||[]).push([[229],{6272:(e,s,n)=>{"use strict";n.r(s),n.d(s,{data:()=>a});const a={key:"v-3c6d4c00",path:"/model/related-relationships/belongsToMany.html",title:"多对多",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"软件版本",slug:"软件版本",children:[]},{level:2,title:"关键字和表",slug:"关键字和表",children:[]},{level:2,title:"生成迁移文件和模型",slug:"生成迁移文件和模型",children:[{level:3,title:"编辑迁移文件",slug:"编辑迁移文件",children:[]},{level:3,title:"运行 php artisan 命令保存修改到数据库",slug:"运行-php-artisan-命令保存修改到数据库",children:[]}]},{level:2,title:"定义关联关系和修改模型的 fillable 属性",slug:"定义关联关系和修改模型的-fillable-属性",children:[]},{level:2,title:"使用 tinker 填充数据",slug:"使用-tinker-填充数据",children:[]},{level:2,title:"关联操作",slug:"关联操作",children:[{level:3,title:"新增数据",slug:"新增数据",children:[]},{level:3,title:"查询数据",slug:"查询数据",children:[]},{level:3,title:"关联删除",slug:"关联删除",children:[]},{level:3,title:"更新数据",slug:"更新数据",children:[]},{level:3,title:"一些方法",slug:"一些方法",children:[]}]}],filePathRelative:"model/related-relationships/belongsToMany.md",git:{updatedTime:1617004997e3,contributors:[]}}},3516:(e,s,n)=>{"use strict";n.r(s),n.d(s,{default:()=>r});const a=(0,n(6252).uE)('<h1 id="多对多"><a class="header-anchor" href="#多对多">#</a> 多对多</h1><p>数据表之间往往不是孤立的，而是纵横交叉、相互关联的，比如一个用户对应多个角色，一个角色拥有多个用户等类似的多对多关联。</p><h2 id="软件版本"><a class="header-anchor" href="#软件版本">#</a> 软件版本</h2><ul><li><p>Laravel Version 5.4.19</p></li><li><p>PHP Version 7.0.8</p></li></ul><h2 id="关键字和表"><a class="header-anchor" href="#关键字和表">#</a> 关键字和表</h2><ul><li><p><code>belongsToMany()</code></p></li><li><p><code>attach()</code></p></li><li><p><code>detach()</code></p></li><li><p><code>sync()</code></p></li><li><p><code>toggle()</code></p></li><li><p><code>roles</code> 、<code>role_user</code> 和 <code>users</code> 表</p></li><li><p><code>User</code> 、<code>Role</code> 和 <code>RoleUser</code> 模型</p></li></ul><p>一种常见的关联关系是多对多，即表A的某条记录通过中间表 C 与表 B 的多条记录关联，反之亦然。比如一个用户有多种角色，反之一个角色对应多个用户。 　　比如用户与角色组之间的关系，我们建立一个中间表 <code>role_user</code>，这个表关联用户表 <code>users</code> <strong>(使用系统自带的users表)</strong> 和 <code>roles</code> 表，如下</p><h2 id="生成迁移文件和模型"><a class="header-anchor" href="#生成迁移文件和模型">#</a> 生成迁移文件和模型</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>php artisan make:migration create_role_user_table --create=role_user\n\nphp artisan make:model Role -m\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="编辑迁移文件"><a class="header-anchor" href="#编辑迁移文件">#</a> 编辑迁移文件</h3><p>文件 <code>&lt;project&gt;/database/migrate/*_create_users_table.php</code> 内容如下</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Schema::create(&#39;users&#39;, function (Blueprint $table) {\n    $table-&gt;increments(&#39;id&#39;);\n    $table-&gt;string(&#39;name&#39;);\n    $table-&gt;string(&#39;email&#39;,30)-&gt;unique();\n    $table-&gt;string(&#39;password&#39;);\n    $table-&gt;rememberToken();\n    $table-&gt;timestamps();\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>文件 <code>&lt;project&gt;/database/migrate/*_create_roles_table.php</code> 内容如下</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Schema::create(&#39;roles&#39;, function (Blueprint $table) {\n    $table-&gt;increments(&#39;id&#39;)-&gt;comment(&#39;角色ID&#39;);\n    $table-&gt;string(&#39;name&#39;,20)-&gt;unique()-&gt;comment(&#39;角色英文名称&#39;);\n    $table-&gt;char(&#39;display_name&#39;,20)-&gt;nullable()-&gt;comment(&#39;角色中文名称&#39;);\n    $table-&gt;string(&#39;description&#39;,180)-&gt;nullable()-&gt;comment(&#39;角色简要描述&#39;);\n    $table-&gt;timestamps();\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>文件 <code>&lt;project&gt;/database/migrate/*_create_role_user_table.php</code> 内容如下</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Schema::create(&#39;role_user&#39; , function(Blueprint $table){\n    $table-&gt;unsignedInteger(&#39;user_id&#39;)-&gt;comment(&#39;用户id，关联users表&#39;);\n    $table-&gt;unsignedInteger(&#39;role_id&#39;)-&gt;comment(&#39;角色id，关联roles表&#39;);\n\n    $table-&gt;foreign(&#39;user_id&#39;)-&gt;references(&#39;id&#39;)-&gt;on(&#39;users&#39;)\n        -&gt;onUpdate(&#39;cascade&#39;)-&gt;onDelete(&#39;cascade&#39;);\n    $table-&gt;foreign(&#39;role_id&#39;)-&gt;references(&#39;id&#39;)-&gt;on(&#39;roles&#39;)\n        -&gt;onUpdate(&#39;cascade&#39;)-&gt;onDelete(&#39;cascade&#39;);\n\n    $table-&gt;primary([&#39;user_id&#39; , &#39;role_id&#39;]);\n    $table-&gt;timestamps();\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="运行-php-artisan-命令保存修改到数据库"><a class="header-anchor" href="#运行-php-artisan-命令保存修改到数据库">#</a> 运行 php artisan 命令保存修改到数据库</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>php artisan migrate\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>执行上面的命令后数据库将生成五张表， migrations password_resets users roles role_user</p></blockquote><h2 id="定义关联关系和修改模型的-fillable-属性"><a class="header-anchor" href="#定义关联关系和修改模型的-fillable-属性">#</a> 定义关联关系和修改模型的 fillable 属性</h2><p>在 <code>User</code> 模型中定义与 <code>Role</code> 模型的对应关系：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public function roles()\n{\n    /**\n     * @param  string $related    关联关系\n     * @param  string $table      关联中间表 不填这里默认为 role_user 规则为：Str::snake(class_basename($related)). &#39;_&#39; . Str::snake(class_basename($this)) 并在数据拼接前使用 sort() 排序；\n     * @param  string $foreignKey 当前模型的外键id,不填默认为 user_id 规则为：Str::snake(class_basename($this)).&#39;_&#39;.$this-&gt;primaryKey;\n     * @param  string $relatedKey 关联模型的外键id，不填默认为 role_id 规则为：Str::snake(class_basename($related)).&#39;_&#39;.$related-&gt;primaryKey\n     * @param  string $relation   关联方法名 不填默认为roles\n     */\n    return $this-&gt;belongsToMany(&#39;App\\Role&#39; , &#39;role_user&#39; , &#39;user_id&#39; , &#39;role_id&#39; , &#39;roles&#39;)-&gt;withTimestamps();\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在 <code>Role</code> 模型中定义与 <code>User</code> 模型的关联对应关系：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public function users()\n{\n    /**\n     * @param  string $related    关联关系\n     * @param  string $table      关联中间表 不填默认为 role_user 规则为：Str::snake(class_basename($related)). &#39;_&#39; . Str::snake(class_basename($this)) 并在数据拼接前使用 sort() 排序；\n     * @param  string $foreignKey 当前模型的外键id,不填默认为 role_id 规则为：Str::snake(class_basename($this)).&#39;_&#39;.$this-&gt;primaryKey;\n     * @param  string $relatedKey 关联模型的外键id，不填默认为 user_id 规则为：Str::snake(class_basename($related)).&#39;_&#39;.$related-&gt;primaryKey\n     * @param  string $relation   关联方法名 不填默认为 users\n     */\n    return $this-&gt;belongsToMany(User::class , &#39;role_user&#39; , &#39;role_id&#39; , &#39;user_id&#39; , &#39;users&#39;)\n                      -&gt;withPivot([&#39;created_at&#39;,&#39;updated_at&#39;]) // 中间表的字段，这里的中间表是 role_user\n                      -&gt;withTimestamps();\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>如果想要中间表自动维护 <code>created_at</code> 和 <code>updated_at</code> 时间戳，可在定义关联方法时加上 <code>withTimestamps()</code> 方法</p></blockquote><h2 id="使用-tinker-填充数据"><a class="header-anchor" href="#使用-tinker-填充数据">#</a> 使用 tinker 填充数据</h2><p>修改 <code>/databases/factories/ModelFactory.php</code>，新增关联数据。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/** @var \\Illuminate\\Database\\Eloquent\\Factory $factory */\n$factory-&gt;define(App\\User::class , function(Faker\\Generator $faker){\n    static $password;\n\n    return [\n        &#39;name&#39;           =&gt; $faker-&gt;name ,\n        &#39;email&#39;          =&gt; $faker-&gt;unique()-&gt;safeEmail ,\n        &#39;password&#39;       =&gt; $password ? : $password = bcrypt(&#39;secret&#39;) ,\n        &#39;remember_token&#39; =&gt; str_random(10) ,\n    ];\n});\n\n$factory-&gt;define(App\\Role::class , function(Faker\\Generator $faker){\n    return [\n        &#39;name&#39;         =&gt; $faker-&gt;name ,\n        &#39;display_name&#39; =&gt; $faker-&gt;name ,\n        &#39;description&#39;  =&gt; $faker-&gt;text(150) ,\n    ];\n});\n$factory-&gt;define(App\\RoleUser::class , function(Faker\\Generator $faker){\n    $user_ids = \\App\\User::pluck(&#39;id&#39;)-&gt;toArray();\n    $role_ids = \\App\\User::pluck(&#39;id&#39;)-&gt;toArray();\n\n    return [\n        &#39;user_id&#39; =&gt; $faker-&gt;randomElement($user_ids) ,\n        &#39;role_id&#39; =&gt; $faker-&gt;randomElement($role_ids)\n    ];\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>使用 tinker 命令</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>php artisan tinker\n\n## 进入到 tinker 界面执行如下命令\nnamespace App\nfactory(User::class,4)-&gt;create(); // 生成4个用户\nfactory(Role::class,4)-&gt;create() // 生成4条 role_user 表的测试数据\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="关联操作"><a class="header-anchor" href="#关联操作">#</a> 关联操作</h2><h3 id="新增数据"><a class="header-anchor" href="#新增数据">#</a> 新增数据</h3><h4 id="将用户关联到角色"><a class="header-anchor" href="#将用户关联到角色">#</a> 将用户关联到角色</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$role_id = 2;\n$user = \\App\\User::find(1);\n$user-&gt;roles()-&gt;attach($role_id);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="将用户批量放入到角色"><a class="header-anchor" href="#将用户批量放入到角色">#</a> 将用户批量放入到角色</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$role_ids = [1,3,4];\n$user = \\App\\User::find(1);\n$user-&gt;roles()-&gt;attach($role_ids);\n\n// $user-&gt;roles()-&gt;attach([1 =&gt; [&#39;attribute1&#39; =&gt; &#39;value1&#39;], 2, 3]);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>有时可能想要使用一个命令，在建立新模型数据的同时附加关联。可以使用 <code>save</code>方法达成目的：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$role = new Role([&#39;name&#39; =&gt; &#39;Editor&#39;]);\n\n\\App\\User::find(1)-&gt;roles()-&gt;save($role);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面的例子里，新的 <code>Role</code> 模型对象会在储存的同时关联到 <code>user</code> 模型。也可以传入属性数组把数据加到关联数据库表：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\\App\\User::find(1)-&gt;roles()-&gt;save($role, [&#39;field&#39; =&gt; &#39;value&#39;]);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="查询数据"><a class="header-anchor" href="#查询数据">#</a> 查询数据</h3><p>查询用户所拥有的角色</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$user = \\App\\User::find(1);\n$roles = $user-&gt;roles;\ndd($roles-&gt;toArray());\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>查询角色下属的所有用户</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$role = \\App\\Role::find(2);\n$users = $role-&gt;users;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="关联删除"><a class="header-anchor" href="#关联删除">#</a> 关联删除</h3><p>将用户从角色中移除</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$role_id = 1;\n$user = \\App\\User::find(1);\n$user-&gt;roles()-&gt;detach($role_id);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>将用户从所有角色中移除</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$user = \\App\\User::find(1);\n$user-&gt;roles()-&gt;detach();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>删除角色下的所有用户关联数据</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$role = \\App\\Role::find(2);\n$role-&gt;users()-&gt;delete();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="更新数据"><a class="header-anchor" href="#更新数据">#</a> 更新数据</h3><h4 id="把用户-同步-到角色中"><a class="header-anchor" href="#把用户-同步-到角色中">#</a> 把用户&quot;同步&quot;到角色中</h4><p>也可以使用 <code>sync</code> 方法附加关联模型。 <code>sync</code> 方法会把根据 ID 数组把关联存到中间表。附加完关联后，中间表里的模型只会关联到 ID 数组里的 id。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$user = \\App\\User::find(1);\n$user-&gt;roles()-&gt;sync([1,2,4]);\n\n$user-&gt;roles()-&gt;sync([1 =&gt; [&#39;field&#39; =&gt; &#39;value&#39;]]); // 加入其他字段的数据\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="把角色-同步-给用户"><a class="header-anchor" href="#把角色-同步-给用户">#</a> 把角色&quot;同步&quot;给用户</h4><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$role = \\App\\Role::find(3);\n$role-&gt;users()-&gt;sync([1]);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>如果在定义 <code>belongsToMany()</code> 关联关系的时候，同时想操作中间关联表的数据，这里指的是<code>role_user</code> 表，那么可以定义 <code>with-&gt;withPivot($columns)</code> （参数填写中间表的字段） 那么，我们可以在使用 <code>attach()</code> 方法的时候传入第二个参数进行数据的同步更新，例如：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>dd($user-&gt;roles()-&gt;attach($role_id,[&#39;created_at&#39;=&gt;&#39;2019-04-24 06:08:22&#39;]));\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>当然，如果单独需要更新中间表，这里指的是<code>role_user</code> 表的字段，可以使用 <code>updateExistingPivot()</code>，例如：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$role_id = 2;\n$user = \\App\\User::find(1);\n$user-&gt;roles()-&gt;updateExistingPivot($role_id,[&#39;created_at&#39;=&gt;&#39;2019-04-24 06:08:22&#39;]);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></blockquote><h3 id="一些方法"><a class="header-anchor" href="#一些方法">#</a> 一些方法</h3><h4 id="toggle"><a class="header-anchor" href="#toggle">#</a> <code>toggle</code></h4><p>顾名思义，如果表中存在则删除数据，如果表中不存在则新增数据。运用场景比如：点赞、喜欢或踩等切换操作。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$role_id = 2; // 入参 integer | array\n$user = \\App\\User::find(1);\n$user-&gt;roles()-&gt;toggle($role_id);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',63),r={render:function(e,s){return a}}}}]);