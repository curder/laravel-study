(self.webpackChunklaravel_study=self.webpackChunklaravel_study||[]).push([[9133],{3153:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-12f990d2",path:"/tests/unit-test-laravel-api-pest-framework.html",title:"使用 pest 测试 Laravel API",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"技术要求",slug:"技术要求",children:[]},{level:2,title:"安装 Laravel",slug:"安装-laravel",children:[]},{level:2,title:"安装 Pest",slug:"安装-pest",children:[]},{level:2,title:"创建待办事项模型，迁移和控制器",slug:"创建待办事项模型-迁移和控制器",children:[]},{level:2,title:"修改模型工厂",slug:"修改模型工厂",children:[]},{level:2,title:"配置数据库",slug:"配置数据库",children:[]},{level:2,title:"编写测试",slug:"编写测试",children:[]},{level:2,title:"生成待办事项应用程序",slug:"生成待办事项应用程序",children:[]},{level:2,title:"结论",slug:"结论",children:[]},{level:2,title:"原文链接",slug:"原文链接",children:[]}],filePathRelative:"tests/unit-test-laravel-api-pest-framework.md",git:{updatedTime:1617172623e3,contributors:[]}}},3687:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>Rn});var p=a(6252);const t=(0,p.Wm)("h1",{id:"使用-pest-测试-laravel-api",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#使用-pest-测试-laravel-api","aria-hidden":"true"},"#"),(0,p.Uk)(" 使用 pest 测试 Laravel API")],-1),e={href:"https://pestphp.com/",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("Pest"),l=(0,p.Uk)(" 是 "),c={href:"https://twitter.com/enunomaduro",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Uk)("Nuno Maduro"),r=(0,p.Uk)(" 开发的一个新的测试PHP框架。"),i=(0,p.Wm)("p",null,"虽然 Pest 本身是建立在流行的PHP测试框架 PHPUnit 之上，但 Pest 旨在为编写测试提供更好的体验，哲学很简单。",-1),k=(0,p.Wm)("p",null,"通过提供富有表现力的界面，使 TDD 体验简单而优雅。",-1),b=(0,p.Wm)("p",null,"在本文中了解如何在 Laravel 项目中开始使用 Pest 。",-1),d=(0,p.Wm)("p",null,[(0,p.Uk)("使用测试驱动的方法，将构建一个简单的 "),(0,p.Wm)("code",null,"todos"),(0,p.Uk)(" 待办应用程序，可以创建、编辑、更新和删除任务。")],-1),m=(0,p.Wm)("h2",{id:"技术要求",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#技术要求","aria-hidden":"true"},"#"),(0,p.Uk)(" 技术要求")],-1),g=(0,p.Wm)("li",null,"PHP 7.3 或更高版本。Pest需要PHP 7.3+才能运行。",-1),h={href:"https://laravel.com/docs/8.x/installation",target:"_blank",rel:"noopener noreferrer"},v=(0,p.Uk)("Laravel 8"),f={href:"https://getcomposer.org/",target:"_blank",rel:"noopener noreferrer"},q=(0,p.Uk)("Composer"),y=(0,p.Uk)("对 "),w={href:"https://phpunit.readthedocs.io/en/9.0/index.html",target:"_blank",rel:"noopener noreferrer"},T=(0,p.Uk)("PHPUnit"),$=(0,p.Uk)(" 的基本了解"),W=(0,p.Wm)("li",null,"对 SQLite 基本了解，本文将使用 SQLite，因为它可以更快地运行测试。",-1),x=(0,p.uE)('<h2 id="安装-laravel" tabindex="-1"><a class="header-anchor" href="#安装-laravel" aria-hidden="true">#</a> 安装 Laravel</h2><p>设置新的 Laravel 项目有多种方法，可以通过 Laravel 安装程序或使用 Composer 进行操作，这里使用 Composer 。</p><p>在终端中运行以下命令：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">composer</span> create-project --prefer-dist laravel/laravel:^8.0 laravel-pest-todo-test-demo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这将在 <code>laravel-pest-todo-test-demo</code> 目录中为我们建立一个新的 Laravel 8 的项目。</p><h2 id="安装-pest" tabindex="-1"><a class="header-anchor" href="#安装-pest" aria-hidden="true">#</a> 安装 Pest</h2><p>现在已经建立了一个新的 Laravel 8 项目，还需要执行几个额外的步骤来与 Laravel 一起建立 <a href="">Pest</a>。</p>',7),U=(0,p.Uk)("进入 "),P=(0,p.Wm)("code",null,"laravel-pest-todo-test-demo",-1),L=(0,p.Uk)(" 目录，然后运行以下命令安装 "),C={href:"https://pestphp.com/docs/plugins/laravel/",target:"_blank",rel:"noopener noreferrer"},E=(0,p.Uk)("Laravel Pest插件"),R=(0,p.Uk)("。"),S=(0,p.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> laravel-pest-todo-test-demo\n\n<span class="token function">composer</span> require --dev pestphp/pest-plugin-laravel\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',1),D={class:"custom-container warning"},_=(0,p.Wm)("p",{class:"custom-container-title"},"注意",-1),A=(0,p.Uk)("由于当前版本 "),H=(0,p.Wm)("code",null,"pestphp/pest-plugin-laravel@v1.0.0",-1),F=(0,p.Uk)(" 对 phpunit 的版本要求 "),I=(0,p.Wm)("code",null,'"phpunit/phpunit": ">= 9.3.7 <= 9.5.3"',-1),N=(0,p.Uk)("，可以通过 "),J={href:"https://github.com/pestphp/pest/blob/master/composer.json#L26",target:"_blank",rel:"noopener noreferrer"},O=(0,p.Uk)("composer.json"),j=(0,p.Uk)(" 查看。 所以需要修改我们项目的 phpunit 版本，修改 "),M=(0,p.Wm)("code",null,"composer.json",-1),B=(0,p.Uk)(" 中 "),Q=(0,p.Wm)("code",null,'"phpunit/phpunit": "9.5.3"',-1),V=(0,p.Uk)("，指定 phpunit 的版本为："),Y=(0,p.Wm)("code",null,"9.5.3",-1),z=(0,p.Uk)("。"),G=(0,p.Wm)("p",null,"插件安装完成后，运行以下命令：",-1),X=(0,p.Wm)("div",{class:"language-bash ext-sh line-numbers-mode"},[(0,p.Wm)("pre",{class:"language-bash"},[(0,p.Wm)("code",null,"php artisan pest:install\n")]),(0,p.Wm)("div",{class:"line-numbers"},[(0,p.Wm)("span",{class:"line-number"},"1"),(0,p.Wm)("br")])],-1),K=(0,p.Wm)("p",null,[(0,p.Uk)("将在项目目录 "),(0,p.Wm)("code",null,"tests"),(0,p.Uk)(" 目录中创建一个"),(0,p.Wm)("code",null,"Pest.php"),(0,p.Uk)("文件。")],-1),Z=(0,p.Uk)("该 "),nn=(0,p.Wm)("code",null,"Pest.php",-1),sn=(0,p.Uk)(" 文件被"),an={href:"https://getcomposer.org/doc/01-basic-usage.md#autoloading",target:"_blank",rel:"noopener noreferrer"},pn=(0,p.Uk)("自动加载"),tn=(0,p.Uk)(" 。Laravel 附带了一些基于 PHPUnit 的示例测试文件。 让更改这些测试以改为使用 Pest 。转到 "),en=(0,p.Wm)("code",null,"tests/Future",-1),on=(0,p.Uk)(" 目录并查看 "),ln=(0,p.Wm)("code",null,"ExampleTest.php",-1),cn=(0,p.Uk)(" 文件。"),un=(0,p.uE)('<div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">Tests<span class="token punctuation">\\</span>Feature</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Tests<span class="token punctuation">\\</span>TestCase</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">ExampleTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * A basic test example.\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">testBasicTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>要将此测试迁移到相应的 Pest 实现，替换文件的内容：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;has welcome page&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">assertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>将这个 <code>ExampleTest</code> 文件从大约20行代码减少到仅2行，同时测试了完全相同的事物并产生了相同的结果。</p><p>也就是说，它访问<code>/</code> 处的根 URL ，并断言返回了 HTTP 状态码 200。</p><p>Pest 提供了两种编写测试的功能 <code>test()</code> 和 <code>it()</code>。</p><p>这两个函数都将测试描述作为第一个参数，并将包含测试期望的闭包作为第二个参数。</p><p>同样，也将 <code>ExampleTest.php</code> 位于 <code>tests/Unit</code> 目录中的文件也使用Pest。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;basic&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>接下来，使用以下命令运行测试套件：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>./vendor/bin/pest\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如下图所示，所有测试均应通过。</p>',12),rn=(0,p.uE)('<h2 id="创建待办事项模型-迁移和控制器" tabindex="-1"><a class="header-anchor" href="#创建待办事项模型-迁移和控制器" aria-hidden="true">#</a> 创建待办事项模型，迁移和控制器</h2><p>应用程序将有一个名为的模型 <code>Todo</code> 。Laravel 提供了一个方便的命令，用于一次性生成模型、迁移文件、控制器和模型工厂。</p><p>为此，请运行以下命令：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>php artisan make:model Todo -mcf\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>接下来，将以下代码添加到迁移文件中的方法中：<code>database/migrations[TODAYSDATE]_create_todos_table.php</code></p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">boolean</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;completed&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">timestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>每个待办任务将具有一个 <code>name</code> 属性以及一个布尔 <code>completed</code> 属性，其默认值为 <code>false</code>。接下来，<code>App/Models/Todo.php</code> 使用以下代码编辑文件：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Models</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Factories<span class="token punctuation">\\</span>HasFactory</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">Todo</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">use</span> <span class="token package">HasFactory</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">protected</span> <span class="token variable">$fillable</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;completed&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',8),kn=(0,p.Uk)("将模型的 "),bn=(0,p.Wm)("code",null,"name",-1),dn=(0,p.Uk)(" 和 "),mn=(0,p.Wm)("code",null,"completed",-1),gn=(0,p.Uk)(" 属性分配为 "),hn={href:"https://laravel.com/docs/8.x/eloquent#mass-assignment",target:"_blank",rel:"noopener noreferrer"},vn=(0,p.Uk)("允许填充"),fn=(0,p.Uk)(" 。"),qn=(0,p.uE)('<h2 id="修改模型工厂" tabindex="-1"><a class="header-anchor" href="#修改模型工厂" aria-hidden="true">#</a> 修改模型工厂</h2><p>编辑 <code>database/factories/TodoFactory.php</code> 文件的 <code>definition()</code> 方法以返回类似于以下数组的数组：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">Database<span class="token punctuation">\\</span>Factories</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Todo</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Factories<span class="token punctuation">\\</span>Factory</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">TodoFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * The name of the factory&#39;s corresponding model.\n     *\n     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">string</span></span>\n     */</span>\n    <span class="token keyword">protected</span> <span class="token variable">$model</span> <span class="token operator">=</span> <span class="token class-name static-context">Todo</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * Define the model&#39;s default state.\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">array</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">definition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>\n            <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Deploy Twilio Verify to Live&#39;</span><span class="token punctuation">,</span>\n            <span class="token string single-quoted-string">&#39;completed&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span>\n          <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>该 <code>definition</code> 方法返回使用工厂创建模型时应应用的默认属性值集。</p><h2 id="配置数据库" tabindex="-1"><a class="header-anchor" href="#配置数据库" aria-hidden="true">#</a> 配置数据库</h2><p>使用内存中的 <code>SQLite</code> 数据库进行测试。Laravel 已经提供了使用 SQLite 数据库进行测试的支持。</p><p>位于项目目录根目录下的 <code>phpunit.xml</code> 文件，并取消注释以下代码行：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code>&lt;<span class="token punctuation">?</span>xml version=&quot;1.0&quot; encoding=&quot;UTF<span class="token punctuation">-</span>8&quot;<span class="token punctuation">?</span><span class="token punctuation">&gt;</span>\n&lt;phpunit xmlns<span class="token punctuation">:</span>xsi=&quot;http<span class="token punctuation">:</span>//www.w3.org/2001/XMLSchema<span class="token punctuation">-</span>instance&quot;\n         xsi<span class="token punctuation">:</span>noNamespaceSchemaLocation=&quot;./vendor/phpunit/phpunit/phpunit.xsd&quot;\n         bootstrap=&quot;vendor/autoload.php&quot;\n         colors=&quot;true&quot;\n<span class="token punctuation">&gt;</span>\n    &lt;testsuites<span class="token punctuation">&gt;</span>\n        &lt;testsuite name=&quot;Unit&quot;<span class="token punctuation">&gt;</span>\n            &lt;directory suffix=&quot;Test.php&quot;<span class="token punctuation">&gt;</span>./tests/Unit&lt;/directory<span class="token punctuation">&gt;</span>\n        &lt;/testsuite<span class="token punctuation">&gt;</span>\n        &lt;testsuite name=&quot;Feature&quot;<span class="token punctuation">&gt;</span>\n            &lt;directory suffix=&quot;Test.php&quot;<span class="token punctuation">&gt;</span>./tests/Feature&lt;/directory<span class="token punctuation">&gt;</span>\n        &lt;/testsuite<span class="token punctuation">&gt;</span>\n    &lt;/testsuites<span class="token punctuation">&gt;</span>\n    &lt;coverage processUncoveredFiles=&quot;true&quot;<span class="token punctuation">&gt;</span>\n        &lt;include<span class="token punctuation">&gt;</span>\n            &lt;directory suffix=&quot;.php&quot;<span class="token punctuation">&gt;</span>./app&lt;/directory<span class="token punctuation">&gt;</span>\n        &lt;/include<span class="token punctuation">&gt;</span>\n    &lt;/coverage<span class="token punctuation">&gt;</span>\n    &lt;php<span class="token punctuation">&gt;</span>\n        &lt;server name=&quot;APP_ENV&quot; value=&quot;testing&quot;/<span class="token punctuation">&gt;</span>\n        &lt;server name=&quot;BCRYPT_ROUNDS&quot; value=&quot;4&quot;/<span class="token punctuation">&gt;</span>\n        &lt;server name=&quot;CACHE_DRIVER&quot; value=&quot;array&quot;/<span class="token punctuation">&gt;</span>\n        &lt;server name=&quot;DB_CONNECTION&quot; value=&quot;sqlite&quot;/<span class="token punctuation">&gt;</span>\n        &lt;server name=&quot;DB_DATABASE&quot; value=&quot;<span class="token punctuation">:</span>memory<span class="token punctuation">:</span>&quot;/<span class="token punctuation">&gt;</span>\n        &lt;server name=&quot;MAIL_MAILER&quot; value=&quot;array&quot;/<span class="token punctuation">&gt;</span>\n        &lt;server name=&quot;QUEUE_CONNECTION&quot; value=&quot;sync&quot;/<span class="token punctuation">&gt;</span>\n        &lt;server name=&quot;SESSION_DRIVER&quot; value=&quot;array&quot;/<span class="token punctuation">&gt;</span>\n        &lt;server name=&quot;TELESCOPE_ENABLED&quot; value=&quot;false&quot;/<span class="token punctuation">&gt;</span>\n    &lt;/php<span class="token punctuation">&gt;</span>\n&lt;/phpunit<span class="token punctuation">&gt;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="编写测试" tabindex="-1"><a class="header-anchor" href="#编写测试" aria-hidden="true">#</a> 编写测试</h2><p>既然已经完成了所有必要的前置设置和配置，就可以开始编写测试了。</p><p>这些测试必须具有正常运行的应用程序，并将提供相应的实现以确保所有测试均通过。</p><p>运行以下 Pest 命令以创建单元测试文件：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>php artisan pest:test TodoTest --unit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这将 <code>TodoTest.php</code> 在 <code>tests/Unit</code> 目录中创建。用以下代码替换文件的代码：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Todo</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>RefreshDatabase</span><span class="token punctuation">;</span>\n\n<span class="token function">uses</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context">Tests<span class="token punctuation">\\</span>TestCase</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name static-context">RefreshDatabase</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;does not create a to-do without a name field&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">postJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/api/todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertStatus</span><span class="token punctuation">(</span><span class="token number">422</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;can create a to-do&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token variable">$attributes</span> <span class="token operator">=</span> <span class="token class-name static-context">Todo</span><span class="token operator">::</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">postJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/api/todos&#39;</span><span class="token punctuation">,</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">assertJson</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;To-do has been created&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertDatabaseHas</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;can fetch a to-do&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token variable">$todo</span> <span class="token operator">=</span> <span class="token class-name static-context">Todo</span><span class="token operator">::</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/api/todos/<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$todo</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Retrieved To-do&#39;</span><span class="token punctuation">,</span>\n        <span class="token string single-quoted-string">&#39;todo&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n            <span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$todo</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">,</span>\n            <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$todo</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">,</span>\n            <span class="token string single-quoted-string">&#39;completed&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$todo</span><span class="token operator">-&gt;</span><span class="token property">completed</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">assertJson</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;can update a to-do&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token variable">$todo</span> <span class="token operator">=</span> <span class="token class-name static-context">Todo</span><span class="token operator">::</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$updatedTodo</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Updated To-do&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">putJson</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/api/todos/<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$todo</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">,</span> <span class="token variable">$updatedTodo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">assertJson</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;To-do has been updated&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertDatabaseHas</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;todos&#39;</span><span class="token punctuation">,</span> <span class="token variable">$updatedTodo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">it</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;can delete a to-do&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token variable">$todo</span> <span class="token operator">=</span> <span class="token class-name static-context">Todo</span><span class="token operator">::</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">deleteJson</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;/api/todos/<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$todo</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">}</span></span>&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">assertStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">assertJson</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;To-do has been deleted&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name static-context">Todo</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><p>在文件的顶部，该 <code>uses()</code> 方法将 <code>TestCase</code> 类和 <code>RefreshDatabase</code> Trait 绑定到当前的测试文件。</p><p>该基类 <code>TestCase</code> 由 Laravel 提供，并提供了在测试时使用该框架的辅助方法。</p><p>该 <code>RefreshDatabase</code> 特征负责在每次测试后迁移和重置数据库，以使先前测试的数据不会干扰后续测试。</p><p>现在，回顾一下每个测试的功能：</p><blockquote><p>Laravel 提供了多个帮助程序来测试JSON API及其响应。</p></blockquote><blockquote><p><strong>it(&#39;does not create a to-do without a name field&#39;)</strong></p><p>利用 <code>postJson</code> 方法向 <code>api/todos</code> 地址发送 POST 请求，并传递一个空数组参数。接下来断言，<code>assertStatus()</code> 返回响应中的方法确保应返回 HTTP 状态代码 422 。作用是确保名称字段必须提供。</p></blockquote><blockquote><p><strong>it(&#39;can create a to-do&#39;)</strong></p><p>使用 <code>POST</code> 方式在 <code>api/todos</code> 地址发出请求时创建待办事项。断言已返回 HTTP 状态代码 201 ，并且该数据库实际上包含使用该 <code>assertDatabase()</code> 方法的待办事项。</p></blockquote><blockquote><p><strong>it(&#39;can fetch a to-do&#39;)</strong></p><p>使用 <code>TodoFactory</code> 上的 <code>create()</code> 方法，可以创建待办任务并将其存储在数据库中。接下来断言返回的状态码为 200 。该 <code>assertJson()</code> 方法将响应转换为数组，并验证给定数组是否存在于应用程序将返回的 JSON 响应中。此测试检查是否可以使用 ID 提取特定的待办事项。</p></blockquote><blockquote><p><strong>it(&#39;can update a to-do&#39;)</strong></p><p>此测试确保可以更新待办事项，并且可以在数据库中找到更新后的任务。</p></blockquote><blockquote><p><strong>it(&#39;can delete a to-do&#39;)</strong></p><p>此测试确保可以删除待办事项，并验证数据库中包含的任务总数为零。</p></blockquote><p>要运行测试，请运行以下命令：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>./vendor/bin/pest --filter TodoTest\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>由于当前尚未实现任何功能，因此测试应该会失败。</p>',28),yn=(0,p.uE)('<h2 id="生成待办事项应用程序" tabindex="-1"><a class="header-anchor" href="#生成待办事项应用程序" aria-hidden="true">#</a> 生成待办事项应用程序</h2><p>到目前为止已经编写的测试的相应实现。转到 <code>app/Http/Controllers</code> 控制器目录中的 <code>TodoController.php</code> 文件，然后将文件代码替换为以下代码：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Todo</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">TodoController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">create</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$todo</span> <span class="token operator">=</span> <span class="token class-name static-context">Todo</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">only</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n            <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;To-do has been created&#39;</span><span class="token punctuation">,</span>\n            <span class="token string single-quoted-string">&#39;todo&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">mapTodoResponse</span><span class="token punctuation">(</span><span class="token variable">$todo</span><span class="token punctuation">)</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Todo</span> <span class="token variable">$todo</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n            <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Retrieved To-do&#39;</span><span class="token punctuation">,</span>\n            <span class="token string single-quoted-string">&#39;todo&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">mapTodoResponse</span><span class="token punctuation">(</span><span class="token variable">$todo</span><span class="token punctuation">)</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Todo</span> <span class="token variable">$todo</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$todo</span><span class="token operator">-&gt;</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">only</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$todo</span><span class="token operator">-&gt;</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n            <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;To-do has been updated&#39;</span><span class="token punctuation">,</span>\n            <span class="token string single-quoted-string">&#39;todo&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">mapTodoResponse</span><span class="token punctuation">(</span><span class="token variable">$todo</span><span class="token punctuation">)</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">delete</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Todo</span> <span class="token variable">$todo</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$todo</span><span class="token operator">-&gt;</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n            <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;To-do has been deleted&#39;</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>\n            <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;required|string|min:4&#39;</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">mapTodoResponse</span><span class="token punctuation">(</span><span class="token variable">$todo</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">[</span>\n            <span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$todo</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">,</span>\n            <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$todo</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">,</span>\n            <span class="token string single-quoted-string">&#39;completed&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$todo</span><span class="token operator">-&gt;</span><span class="token property">completed</span>\n        <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br></div></div><blockquote><ul><li><code>create()</code> 方法创建一个新的待办任务。</li><li><code>show()</code> 方法根据其ID返回给定的任务。</li><li><code>update()</code> 方法将更新待办任务。</li><li><code>delete()</code> 方法删除给定的待办任务。</li></ul></blockquote><p>接下来，将以下路由添加到 <code>routes/api.php</code> 文件：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers<span class="token punctuation">\\</span>TodoController</span><span class="token punctuation">;</span>\n\n<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/todos/{todo}&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">TodoController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;show&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">TodoController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;create&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/todos/{todo}&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">TodoController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;update&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/todos/{todo}&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name static-context">TodoController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;delete&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>现在已经为测试提供了所有相应的实现，可以返回运行测试，它们现在都应该通过了。使用以下命令再次运行测试：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>./vendor/bin/pest --filter TodoTest\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',8),wn=(0,p.Wm)("h2",{id:"结论",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#结论","aria-hidden":"true"},"#"),(0,p.Uk)(" 结论")],-1),Tn=(0,p.Wm)("p",null,"在本文中，已经了解了如何使用 Pest 测试框架为 Laravel 应用程序编写单元测试。",-1),$n=(0,p.Wm)("p",null,"本教程可以作为 Pest 入门以及对 Laravel 应用程序进行单元测试的理想指南。",-1),Wn=(0,p.Uk)("包含此项目完整代码 "),xn={href:"https://github.com/curder/laravel-pest-todo-test-demo",target:"_blank",rel:"noopener noreferrer"},Un=(0,p.Uk)("GitHub 仓库地址"),Pn=(0,p.Uk)(" 。"),Ln=(0,p.Wm)("h2",{id:"原文链接",tabindex:"-1"},[(0,p.Wm)("a",{class:"header-anchor",href:"#原文链接","aria-hidden":"true"},"#"),(0,p.Uk)(" 原文链接")],-1),Cn={href:"https://www.twilio.com/blog/unit-test-laravel-api-pest-framework",target:"_blank",rel:"noopener noreferrer"},En=(0,p.Uk)("How to Unit Test a Laravel API with the Pest Framework"),Rn={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("p",null,[(0,p.Wm)("a",e,[o,(0,p.Wm)(a)]),l,(0,p.Wm)("a",c,[u,(0,p.Wm)(a)]),r]),i,k,b,d,m,(0,p.Wm)("ul",null,[g,(0,p.Wm)("li",null,[(0,p.Wm)("a",h,[v,(0,p.Wm)(a)])]),(0,p.Wm)("li",null,[(0,p.Wm)("a",f,[q,(0,p.Wm)(a)])]),(0,p.Wm)("li",null,[y,(0,p.Wm)("a",w,[T,(0,p.Wm)(a)]),$]),W]),x,(0,p.Wm)("p",null,[U,P,L,(0,p.Wm)("a",C,[E,(0,p.Wm)(a)]),R]),S,(0,p.Wm)("div",D,[_,(0,p.Wm)("p",null,[A,H,F,I,N,(0,p.Wm)("a",J,[O,(0,p.Wm)(a)]),j,M,B,Q,V,Y,z])]),G,X,K,(0,p.Wm)("p",null,[Z,nn,sn,(0,p.Wm)("a",an,[pn,(0,p.Wm)(a)]),tn,en,on,ln,cn]),un,(0,p.Wm)("img",{src:n.$withBase("/images/tests/unit-test-laravel-api-pest-framework/init-run-pest-test-pass.jpg"),alt:"Run pest test passed"},null,8,["src"]),rn,(0,p.Wm)("p",null,[kn,bn,dn,mn,gn,(0,p.Wm)("a",hn,[vn,(0,p.Wm)(a)]),fn]),qn,(0,p.Wm)("img",{src:n.$withBase("/images/tests/unit-test-laravel-api-pest-framework/run-pest-test-failed.jpg")},null,8,["src"]),yn,(0,p.Wm)("img",{src:n.$withBase("/images/tests/unit-test-laravel-api-pest-framework/run-pest-test-pass.jpg"),alt:"Run pest test passed"},null,8,["src"]),wn,Tn,$n,(0,p.Wm)("p",null,[Wn,(0,p.Wm)("a",xn,[Un,(0,p.Wm)(a)]),Pn]),Ln,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",Cn,[En,(0,p.Wm)(a)])])])],64)}}}}]);