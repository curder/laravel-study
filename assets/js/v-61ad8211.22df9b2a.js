(self.webpackChunklaravel_study=self.webpackChunklaravel_study||[]).push([[4768],{1810:(e,n,s)=>{"use strict";s.r(n),s.d(n,{data:()=>a});const a={key:"v-61ad8211",path:"/others/specified_key_was_too_long_error.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Laravel 5.* 执行迁移文件报错：Specified key was too long error",slug:"laravel-5-执行迁移文件报错-specified-key-was-too-long-error",children:[]}],filePathRelative:"others/specified_key_was_too_long_error.md",git:{updatedTime:1617071363e3,contributors:[]}}},7397:(e,n,s)=>{"use strict";s.r(n),s.d(n,{default:()=>r});const a=(0,s(6252).uE)('<h2 id="laravel-5-执行迁移文件报错-specified-key-was-too-long-error"><a class="header-anchor" href="#laravel-5-执行迁移文件报错-specified-key-was-too-long-error">#</a> Laravel 5.* 执行迁移文件报错：Specified key was too long error</h2><p>命令行执行迁移文件时，报错 <code>Specified key was too long</code>，如果我们仔细检查错误会发现是唯一索引太长了，报错信息如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[Illuminate\\Database\\QueryException]\nSQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long;\nmax key length is 767 bytes (SQL: alter table `users` add unique `users_email_uniq\nue`(`email`))\n\n\n\n[PDOException]\nSQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long;\nmax key length is 767 bytes\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>我们当然可以通过修改迁移文件来修改字段的长度，也可以通过修改迁移文件来解决这个问题。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> $table-&gt;string(&#39;email&#39;,30)-&gt;unique();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>也可以使用更加通用的办法来完成。编辑 <code>AppServiceProvider.php</code> 文件的 <code>boot()</code> 方法。如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>use Illuminate\\Support\\Facades\\Schema;\n\npublic function boot()\n{\n    Schema::defaultStringLength(191);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>相当于给予<code>varchar</code>默认的长度<strong>191</strong>。</p><p>修改数据库的字符集 如图，新版的Laravel 5.4 使用了 <code>utf8mb4</code> 和 <code>utf8mb4_unicode_ci</code> ，这个字符集支持 <strong>emoji</strong></p><p><img src="/related_relationship/screenshot_1493026376620.png" alt=""></p><p>我们将他改成：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&#39;charset&#39; =&gt; &#39;utf8&#39;,\n&#39;collation&#39; =&gt; &#39;utf8_general_ci&#39;,\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>建议在数据库迁移文件中使用第二个参数根据业务需求指定字段的长度，这样更加的切合实际和需求。</p></blockquote>',13),r={render:function(e,n){return a}}}}]);