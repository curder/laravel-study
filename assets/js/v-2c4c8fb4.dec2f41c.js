(self.webpackChunklaravel_study=self.webpackChunklaravel_study||[]).push([[1662],{3678:(e,n,s)=>{"use strict";s.r(n),s.d(n,{data:()=>a});const a={key:"v-2c4c8fb4",path:"/model/related-relationships/morphOne.html",title:"多态一对一",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"软件版本",slug:"软件版本",children:[]},{level:2,title:"表结构",slug:"表结构",children:[]},{level:2,title:"关键字",slug:"关键字",children:[]},{level:2,title:"定义 Eloquent 关联关系",slug:"定义-eloquent-关联关系",children:[]},{level:2,title:"关联操作",slug:"关联操作",children:[{level:3,title:"新增关联数据",slug:"新增关联数据",children:[]},{level:3,title:"查询关联数据",slug:"查询关联数据",children:[]},{level:3,title:"更新关联数据",slug:"更新关联数据",children:[]},{level:3,title:"删除关联数据",slug:"删除关联数据",children:[]}]}],filePathRelative:"model/related-relationships/morphOne.md",git:{updatedTime:1617071363e3,contributors:[]}}},2873:(e,n,s)=>{"use strict";s.r(n),s.d(n,{default:()=>l});const a=(0,s(6252).uE)('<h1 id="多态一对一"><a class="header-anchor" href="#多态一对一">#</a> 多态一对一</h1><p>一对一的多态关联和简单的一对一关联类似，不同之处在于目标模型在单个关联下可以归属于多种不同的模型。</p><p>例如，<code>Post</code> 和 <code>User</code> 可以共享与 <code>Image</code> 模型的多态关联。</p><p>使用一对一多态关联，可以拥有一个可用于博客文章和用户账户的唯一图片列表。</p><h2 id="软件版本"><a class="header-anchor" href="#软件版本">#</a> 软件版本</h2><ul><li><p>Laravel Version 5.4.19</p></li><li><p>PHP Version 7.0.8</p></li></ul><h2 id="表结构"><a class="header-anchor" href="#表结构">#</a> 表结构</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>posts\n    id - integer\n    name - string\n\nusers\n    id - integer\n    name - string\n\nimages\n    id - integer\n    url - string\n    imageable_id - integer\n    imageable_type - string\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>注意 <code>images</code> 表中的 <code>imageable_id</code> 和 <code>imageable_type</code> 字段，<code>imageable_id</code> 字段存储的是文章或用户的 ID 值，而 <code>imageable_type</code> 字段存储的是归属父模型的类名。</p><p>访问 <code>imageable</code> 关联时，<code>Eloquent</code> 使用 <code>imageable_type</code> 字段来判定返回哪种类型的父模型（<code>Post</code> 还是 <code>User</code>）。</p><h2 id="关键字"><a class="header-anchor" href="#关键字">#</a> 关键字</h2><ul><li><p><code>morphTo()</code></p></li><li><p><code>morphOne()</code></p></li></ul><h2 id="定义-eloquent-关联关系"><a class="header-anchor" href="#定义-eloquent-关联关系">#</a> 定义 Eloquent 关联关系</h2><ul><li>在 <code>Image</code> 模型中定义关联关系</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Image extends Model\n{\n    /**\n     * Get all of the owning imageable models.\n     */\n    public function imageable()\n    {\n        return $this-&gt;morphTo();\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>在 <code>Post</code> 模型中定义一对一关联关系</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?php\n\nclass Post extends Model\n{\n    /**\n     * Get the post&#39;s image.\n     */\n    public function image()\n    {\n        return $this-&gt;morphOne(&#39;App\\Image&#39;, &#39;imageable&#39;);\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>在 <code>User</code> 模型中定义一对一关联关系</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?php\n\nclass User extends Model\n{\n    /**\n     * Get the user&#39;s image.\n     */\n    public function image()\n    {\n        return $this-&gt;morphOne(&#39;App\\Image&#39;, &#39;imageable&#39;);\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="关联操作"><a class="header-anchor" href="#关联操作">#</a> 关联操作</h2><h3 id="新增关联数据"><a class="header-anchor" href="#新增关联数据">#</a> 新增关联数据</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$user-&gt;image()-&gt;save($image); // 执行关联写入操作\n\n$post-&gt;image()-&gt;save($image);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="查询关联数据"><a class="header-anchor" href="#查询关联数据">#</a> 查询关联数据</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$post = App\\Post::find(1);\n$user = App\\User::first();\n\n$user-&gt;image;\n$image = $post-&gt;image; // 通过 image 动态属性获取关联数据\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>还可以从多态模型中通过访问调用 <code>morphTo</code> 的方法名来获取其归属的父模型。在这个例子中，就是 <code>Image</code> 模型的 <code>imageable</code> 方法。</p><p>因此，我们可以通过动态属性的方式来访问该方法</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$image = App\\Image::find(1);\n\n$imageable = $image-&gt;imageable;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p><code>Image</code> 模型上的 <code>imageable</code> 关联将会返回 <code>Post</code> 或 <code>User</code> 实例，这取决于哪中模型拥有该图片。</p></blockquote><h3 id="更新关联数据"><a class="header-anchor" href="#更新关联数据">#</a> 更新关联数据</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$user = \\App\\User::first();\n$image = $user-&gt;image; // 获取到关联信息\n$image-&gt;url = &#39;new url&#39;;\n$image-&gt;save();\n\n// 或者使用链式调用\n\\App\\User::first()-&gt;image()-&gt;save([&#39;url&#39; =&gt; &#39;new url&#39;]);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="删除关联数据"><a class="header-anchor" href="#删除关联数据">#</a> 删除关联数据</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$user = \\App\\User::first();\n$user-&gt;image-&gt;delete(); // 删除用户 users 表和 images 相关记录\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',32),l={render:function(e,n){return a}}}}]);