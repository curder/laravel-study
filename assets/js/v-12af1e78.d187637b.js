(self.webpackChunklaravel_study=self.webpackChunklaravel_study||[]).push([[7931],{7456:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-12af1e78",path:"/model/related-relationships/hasOne.html",title:"一对一",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"软件版本",slug:"软件版本",children:[]},{level:2,title:"关键字和数据表",slug:"关键字和数据表",children:[]},{level:2,title:"生成模型和迁移文件",slug:"生成模型和迁移文件",children:[{level:3,title:"编辑迁移文件",slug:"编辑迁移文件",children:[]},{level:3,title:"运行 php artisan 命令保存修改到数据库",slug:"运行-php-artisan-命令保存修改到数据库",children:[]}]},{level:2,title:"定义关联关系和修改模型的 fillable 属性",slug:"定义关联关系和修改模型的-fillable-属性",children:[{level:3,title:"使用 tinker 填充数据",slug:"使用-tinker-填充数据",children:[]},{level:3,title:"执行上述迁移文件填充数据到数据库",slug:"执行上述迁移文件填充数据到数据库",children:[]},{level:3,title:"查看执行结果",slug:"查看执行结果",children:[]}]},{level:2,title:"定义Eloquent关联关系",slug:"定义eloquent关联关系",children:[{level:3,title:"定义关联关系",slug:"定义关联关系",children:[]}]},{level:2,title:"关联操作",slug:"关联操作",children:[{level:3,title:"新增数据",slug:"新增数据",children:[]},{level:3,title:"查询数据",slug:"查询数据",children:[]},{level:3,title:"关联删除",slug:"关联删除",children:[]},{level:3,title:"更新数据",slug:"更新数据",children:[]}]}],filePathRelative:"model/related-relationships/hasOne.md",git:{updatedTime:1617088258e3,contributors:[]}}},3911:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="一对一"><a class="header-anchor" href="#一对一">#</a> 一对一</h1><p>数据表之间往往不是孤立的，而是纵横交叉、相互关联的，比如一个用户对应一个账户，一个账户只属于一个用户就属于一对一关联。</p><h2 id="软件版本"><a class="header-anchor" href="#软件版本">#</a> 软件版本</h2><ul><li><p>Laravel Version 5.4.19</p></li><li><p>PHP Version 7.0.8</p></li></ul><h2 id="关键字和数据表"><a class="header-anchor" href="#关键字和数据表">#</a> 关键字和数据表</h2><ul><li><p><code>hasOne()</code></p></li><li><p><code>belongsTo()</code></p></li><li><p><code>users</code> 和 <code>user_accounts</code> 表</p></li></ul><p>数据操作之前请先配置好，数据库的一些连接信息。例如下面使用mysql数据库，修改项目根目录下的 <code>.env</code> 文件内容。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>DB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=db_name\nDB_USERNAME=db_username\nDB_PASSWORD=db_password\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>一对一是最简单的关联关系，表示表A和表B的记录一一对应。</p><p>比如一个用户对应一个社交账号，在演示该关联关系之前我们先创建一个社交账号表 <code>user_accounts</code> （<strong>假设用户表使用系统自带的</strong>）</p><h2 id="生成模型和迁移文件"><a class="header-anchor" href="#生成模型和迁移文件">#</a> 生成模型和迁移文件</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>php artisan make:model UserAccount -m\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="编辑迁移文件"><a class="header-anchor" href="#编辑迁移文件">#</a> 编辑迁移文件</h3><p><code>&lt;project&gt;/database/migrate/*_create_user_accounts_table.php</code>如下</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Schema</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Schema<span class="token punctuation">\\</span>Blueprint</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Migrations<span class="token punctuation">\\</span>Migration</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">CreateUserAccountsTable</span> <span class="token keyword">extends</span> <span class="token class-name">Migration</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * Run the migrations.\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_accounts&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Blueprint</span> <span class="token variable">$table</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">increments</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">unsigned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">char</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;qq&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;wechat&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;weibo&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">timestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span>\n                      <span class="token operator">-&gt;</span><span class="token function">references</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span>\n                      <span class="token operator">-&gt;</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">)</span>\n                      <span class="token operator">-&gt;</span><span class="token function">onUpdate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cascade&#39;</span><span class="token punctuation">)</span>\n                      <span class="token operator">-&gt;</span><span class="token function">onDelete</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cascade&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * Reverse the migrations.\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name static-context">Schema</span><span class="token operator">::</span><span class="token function">dropIfExists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_accounts&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h3 id="运行-php-artisan-命令保存修改到数据库"><a class="header-anchor" href="#运行-php-artisan-命令保存修改到数据库">#</a> 运行 php artisan 命令保存修改到数据库</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>php artisan migrate\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>执行上面的命令后数据库将生成四张表， migrations password_resets user_accounts users</p></blockquote><h2 id="定义关联关系和修改模型的-fillable-属性"><a class="header-anchor" href="#定义关联关系和修改模型的-fillable-属性">#</a> 定义关联关系和修改模型的 fillable 属性</h2><p>并定义可填充的数据，即 <code>$fillable</code> 数组的值。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\n/**\n * Class UserAccount\n *\n * @package App\n */\nclass UserAccount extends Model\n{\n    /**\n     * @var array\n     */\n    protected $fillable = [&#39;user_id&#39;, &#39;qq&#39;, &#39;wechat&#39;, &#39;weibo&#39;];\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="使用-tinker-填充数据"><a class="header-anchor" href="#使用-tinker-填充数据">#</a> 使用 tinker 填充数据</h3><p>修改 <code>/databases/factories/ModelFactory.php</code>，新增关联数据。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;?php\n\n/*\n|--------------------------------------------------------------------------\n| Model Factories\n|--------------------------------------------------------------------------\n|\n| Here you may define all of your model factories. Model factories give\n| you a convenient way to create models for testing and seeding your\n| database. Just tell the factory how a default model should look.\n|\n*/\n\n/** @var \\Illuminate\\Database\\Eloquent\\Factory $factory */\n$factory-&gt;define(App\\User::class, function (Faker\\Generator $faker) {\n    static $password;\n\n    return [\n        &#39;name&#39; =&gt; $faker-&gt;name,\n        &#39;email&#39; =&gt; $faker-&gt;unique()-&gt;safeEmail,\n        &#39;password&#39; =&gt; $password ?: $password = bcrypt(&#39;secret&#39;),\n        &#39;remember_token&#39; =&gt; str_random(10),\n    ];\n});\n\n$factory-&gt;define(App\\UserAccount::class, function (Faker\\Generator $faker) {\n    return [\n        &#39;user_id&#39; =&gt; 1,\n        &#39;qq&#39; =&gt; $faker-&gt;numberBetween(100000, 999999999),\n        &#39;wechat&#39; =&gt; bcrypt(&#39;secret&#39;),\n        &#39;weibo&#39; =&gt; bcrypt(&#39;secret&#39;)\n    ];\n});\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="执行上述迁移文件填充数据到数据库"><a class="header-anchor" href="#执行上述迁移文件填充数据到数据库">#</a> 执行上述迁移文件填充数据到数据库</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>php artisan tinker\n\n// 进入到交互界面执行如下命令生成关联数据\nnamespace App\nfactory<span class="token punctuation">(</span>User::class,1<span class="token punctuation">)</span>-<span class="token operator">&gt;</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span> // 随机生成一个用户信息\nfactory<span class="token punctuation">(</span>UserAccount::class,1<span class="token punctuation">)</span>-<span class="token operator">&gt;</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span> // 随机生成一个用户关联信息\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="查看执行结果"><a class="header-anchor" href="#查看执行结果">#</a> 查看执行结果</h3><p>在两个表中可以看到写入的数据：</p><p><code>users</code>表数据：</p><p><img src="/related_relationship/screenshot_1492077162810.png" alt=""></p><p><code>users_accounts</code>表：</p><p><img src="/related_relationship/screenshot_1492077196226.png" alt=""></p><h2 id="定义eloquent关联关系"><a class="header-anchor" href="#定义eloquent关联关系">#</a> 定义Eloquent关联关系</h2><p>文件在<code>&lt;project&gt;/app/User.php</code>和<code>&lt;project&gt;/app/UserAccount.php</code>。</p><h3 id="定义关联关系"><a class="header-anchor" href="#定义关联关系">#</a> 定义关联关系</h3><ul><li>在 <code>User</code> 模型中定义与 <code>UserAccount</code> 模型的一对一对应关系</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">namespace</span> <span class="token package">App</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>\n<span class="token punctuation">{</span>\n\n<span class="token operator">...</span>\n\n   <span class="token doc-comment comment">/**\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Relations<span class="token punctuation">\\</span>HasOne</span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">account</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token doc-comment comment">/**\n         * UserAccount::class related 关联模型\n         * user_id foreignKey 当前表关联字段\n         * id localKey 关联表字段\n         */</span>\n        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasOne</span><span class="token punctuation">(</span><span class="token class-name static-context">UserAccount</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li>在 <code>UserAccount</code> 模型中定义与 <code>User</code> 的一对一关系</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">namespace</span> <span class="token package">App</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>\n<span class="token keyword">class</span> <span class="token class-name">UserAccount</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span>\n<span class="token punctuation">{</span>\n\n<span class="token operator">...</span> \n\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Relations<span class="token punctuation">\\</span>BelongsTo</span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token doc-comment comment">/**\n         * User::class related 关联模型\n         * user_id ownerKey 当前表关联字段\n         * id relation 关联表字段\n         */</span>\n        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="关联操作"><a class="header-anchor" href="#关联操作">#</a> 关联操作</h2><h3 id="新增数据"><a class="header-anchor" href="#新增数据">#</a> 新增数据</h3><p>同时新增 <code>users</code> 和 <code>user_accounts</code> 表数据</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$user = \\App\\User::create([\n  &#39;name&#39; =&gt; &#39;curder&#39;,\n  &#39;email&#39; =&gt; &#39;curder@foxmail.com&#39;,\n  &#39;password&#39; =&gt; bcrypt(&#39;secret&#39;),\n  &#39;remember_token&#39; =&gt; str_random(10),\n]); // 新增一个用户信息\n\n$account = new \\App\\UserAccount([&#39;qq&#39; =&gt; &#39;qq Number&#39;, &#39;wechat&#39; =&gt; &#39;wechatNumber&#39;, &#39;weibo&#39; =&gt; &#39;weiboNumber&#39;]); // 生成 UserAccount 对象\n\n$user-&gt;account()-&gt;save($account); // 执行关联写入操作\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>也可以是我们使用 <code>find()</code> 方法获得用户信息（或者使用 <code>\\Auth::id()</code>获得用户信息），再写入到关联表 <code>user_accounts</code>。如下：（这种情况常见于用户修改创建、修改自己的账户信息）</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> $account = new \\App\\UserAccount([&#39;qq&#39; =&gt; &#39;another qq&#39;, &#39;wechat&#39; =&gt; &#39;another wechat&#39;, &#39;weibo&#39; =&gt; &#39;another weibo&#39;]); // 生成 UserAccount 对象，或者数据通过 Request 对象获取 $account = new \\App\\Account($request-&gt;all());\n \\Auth::user()-&gt;account()-&gt;save($account);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></blockquote><h3 id="查询数据"><a class="header-anchor" href="#查询数据">#</a> 查询数据</h3><p>通过用户获取用户关联信息</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取用户表数据</span>\n\n<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">account</span><span class="token punctuation">;</span> <span class="token comment">// 通过用户信息获取用户关联信息</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通过用户关联信息获取用户信息</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$account</span> <span class="token operator">=</span> <span class="token class-name static-context">UserAccount</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取用户关联信息</span>\n\n<span class="token variable">$account</span><span class="token operator">-&gt;</span><span class="token property">user</span><span class="token punctuation">;</span> <span class="token comment">// 通过关联信息获取用户信息</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="关联删除"><a class="header-anchor" href="#关联删除">#</a> 关联删除</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$account = \\App\\UserAccount::find(1);\n$account-&gt;user-&gt;delete(); // 删除用户 users 表和 user_account 相关记录\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="更新数据"><a class="header-anchor" href="#更新数据">#</a> 更新数据</h3><p>通过用户表 <code>users</code> 数据，更新关联 <code>user_accounts</code></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$user = \\App\\User::find(1);\n$account = $user-&gt;account; // 获取到关联信息\n$account-&gt;qq = &#39;new qq&#39;;\n$account-&gt;wechat = &#39;new Wechat&#39;;\n$account-&gt;save();\n\n// 或者当用户登录时，直接通过关联关系进行更新数据\n\\Auth::user()-&gt;account()-&gt;update([&#39;qq&#39; =&gt; &#39;new QQ&#39;, &#39;wechat&#39; =&gt; &#39;new Wechat&#39;]);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>通过 用户信息表 <code>user_accounts</code> 关联更新 <code>users</code> 数据表</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$account = \\App\\UserAccount::find(1);\n$user = $account-&gt;user; // 获取到关联信息\n\n$user-&gt;email = &#39;new@test.com&#39;;\n$user-&gt;save();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="通过关联-user-数据"><a class="header-anchor" href="#通过关联-user-数据">#</a> 通过关联 User 数据</h4><p>另外，如果需要同步更新关联表的 <code>updated_at</code> 字段，在模型中定义 <code>$touches</code> 属性，例如，我们在 UserAccount 中定义如下关系：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/**\n * 要触发的所有关联关系\n *\n * @var array\n */\n protected $touches = [&#39;user&#39;];\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在更新 <code>user_accounts</code> 表中数据时，同步更新 <code>users</code> 表的 <code>updated_at</code> 数据。</p>',60),p={render:function(n,s){return e}}}}]);