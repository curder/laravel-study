(self.webpackChunklaravel_study=self.webpackChunklaravel_study||[]).push([[6013],{3472:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-cd307436",path:"/others/how_to_use_presenter_mode.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"如何使用Presenter模式",slug:"如何使用presenter模式",children:[{level:3,title:"版本",slug:"版本",children:[]}]},{level:2,title:"显示逻辑",slug:"显示逻辑",children:[]},{level:2,title:"Presenter",slug:"presenter",children:[{level:3,title:"将资料显示不同资料",slug:"将资料显示不同资料",children:[]}]},{level:2,title:"是否显示某些资料",slug:"是否显示某些资料",children:[{level:3,title:"依需求显示不同格式",slug:"依需求显示不同格式",children:[]},{level:3,title:"最后",slug:"最后",children:[]}]}],filePathRelative:"others/how_to_use_presenter_mode.md",git:{updatedTime:1627973602e3,contributors:[]}}},5342:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h2 id="如何使用presenter模式" tabindex="-1"><a class="header-anchor" href="#如何使用presenter模式" aria-hidden="true">#</a> 如何使用Presenter模式</h2><p>若将显示逻辑都写在 View，会造成 View 代码臃肿而难以维护，基于 SOLID 原则，应该使用 Presenter 模式辅助 View，将相关的显示逻辑封装在不同的 Presenter ，方便中大型项目的维护。</p><h3 id="版本" tabindex="-1"><a class="header-anchor" href="#版本" aria-hidden="true">#</a> 版本</h3><p>Lararvel 5.4.17</p><h2 id="显示逻辑" tabindex="-1"><a class="header-anchor" href="#显示逻辑" aria-hidden="true">#</a> 显示逻辑</h2><p>在实际开发中，显示逻辑常见的如下：</p><ul><li><p>将资料显示不同资料： 如 <code>性别字段为 M，就显示 Mr.，若性别字段为 F，就显示 Mrs.</code></p></li><li><p>是否显示某些资料：如 <code>根据字段值是否等于 T，要不要显示改字段</code></p></li><li><p>依需求显示不同格式：如 <code>依不同的语系，显示不同的日期格式</code></p></li></ul><h2 id="presenter" tabindex="-1"><a class="header-anchor" href="#presenter" aria-hidden="true">#</a> Presenter</h2><h3 id="将资料显示不同资料" tabindex="-1"><a class="header-anchor" href="#将资料显示不同资料" aria-hidden="true">#</a> 将资料显示不同资料</h3><p>如 <code>性别字段为 M，就显示 Mr.，若性别字段为 F，就显示 Mrs.</code>，我们可能会直接用 blade 写在 view 里，如下：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ config(<span class="token punctuation">&#39;</span>app.locale<span class="token punctuation">&#39;</span>) }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Users<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-center position-ref full-height<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    @foreach($users as $user)\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>@if($user-&gt;gender == &#39;m&#39;){{ &quot;Mr.&quot; }} @else {{ &quot;Mrs.&quot; }} @endif {{$user-&gt;name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{ $user-&gt;email }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    @endforeach\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在中大型项目中，会有几个问题：</p><ul><li><p>由于 Blade 与 Html 夹杂，不太适合写太复杂的代码，只适合做一些简单的 binding ，否则很容易写成传统的 PHP 的意大利面代码</p></li><li><p>无法对显示逻辑做重构与物件导向</p></li></ul><p>比较好的方式是使用 Presenter，具体步骤如下：</p><ul><li><p>将相依无间注入到 Presenter</p></li><li><p>在 presenter 内写格式转换</p></li><li><p>将 Presenter 注入到 View</p></li></ul><h4 id="定义userpresenter" tabindex="-1"><a class="header-anchor" href="#定义userpresenter" aria-hidden="true">#</a> 定义UserPresenter</h4><p><code>app\\Presenters\\UserPersenter.php</code> 代码如下：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Presenters</span><span class="token punctuation">;</span>\n\n\n<span class="token doc-comment comment">/**\n * Class UserPresenter\n *\n * <span class="token keyword">@package</span> <span class="token class-name">App<span class="token punctuation">\\</span>Presenters</span>\n */</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserPresenter</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token keyword">string</span></span> <span class="token parameter">$gender</span>\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token keyword">string</span></span> <span class="token parameter">$name</span>\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">string</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getFullName</span><span class="token punctuation">(</span><span class="token variable">$gender</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token variable">$gender</span> <span class="token operator">==</span> <span class="token string single-quoted-string">&#39;M&#39;</span> <span class="token operator">?</span> <span class="token string single-quoted-string">&#39;Mr. &#39;</span> <span class="token operator">.</span> <span class="token variable">$name</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;Mrs. &#39;</span> <span class="token operator">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>将原本在 blade 中用 <code>@if(){ .. }@else .. @endif</code> 写的逻辑改写在 Presenter 中。</p><h4 id="视图中使用userpresenter" tabindex="-1"><a class="header-anchor" href="#视图中使用userpresenter" aria-hidden="true">#</a> 视图中使用UserPresenter</h4><p>使用 <code>@inject()</code> 注入 <code>UserPresenter</code>，让 View 可以如 Controller 一样使用注入的物件。</p><p>将来如乱显示逻辑怎么修改，都不用改到 Blade ，直接在相关 Presenter 中修改即可。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ config(<span class="token punctuation">&#39;</span>app.locale<span class="token punctuation">&#39;</span>) }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Users<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-center position-ref full-height<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    @inject(&#39;userPresenter&#39;,&#39;App\\Presenters\\UserPresenter&#39;)\n    @foreach($users as $user)\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        {{--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>@if($user-&gt;gender == &#39;m&#39;){{ &quot;Mr.&quot; }} @else {{ &quot;Mrs.&quot; }} @endif {{$user-&gt;name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>--}}\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{ $userPresenter-&gt;getFullName($user-&gt;gender,$user-&gt;name) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{ $user-&gt;email }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    @endforeach\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>改用这种重写，有几个优点：</p><ul><li><p>将资料显示不同个格式的显示逻辑改写在 presenter，解决了 blade 不容易维护的问题</p></li><li><p>可以显示逻辑做重构于物件导向</p></li></ul><h2 id="是否显示某些资料" tabindex="-1"><a class="header-anchor" href="#是否显示某些资料" aria-hidden="true">#</a> 是否显示某些资料</h2><p>如 <code>根据字段值是否为 T ，要不要显示该字段</code>，我们常常会直接用 blade 写在 View 中。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ config(<span class="token punctuation">&#39;</span>app.locale<span class="token punctuation">&#39;</span>) }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Users<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-center position-ref full-height<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    @foreach($users as $user)\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{ $user-&gt;name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n    @if($user-&gt;is_hidden == &#39;F&#39;)\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{ $user-&gt;email }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n    @endif\n    @endforeach\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在中大型项目中，会有几个问题：</p><ul><li><p>由于 blade 与 HTML 夹杂，不太适合写太复杂的业务代码，只适合做一些简单的 binding，否则很容易写成传统的 PHP 的意大利面代码</p></li><li><p>无法对显示逻辑做重构与物件导向</p></li></ul><p>比较好的方式是使用 Presenter，具体步骤如下：</p><ul><li><p>将相依无间注入到 Presenter</p></li><li><p>在 presenter 内写格式转换</p></li><li><p>将 Presenter 注入到 View</p></li></ul><p><code>app\\Presenters\\UserPresenter.php</code> 代码：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Presenters</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>User</span><span class="token punctuation">;</span>\n<span class="token doc-comment comment">/**\n * Class UserPresenter\n *\n * <span class="token keyword">@package</span> <span class="token class-name">App<span class="token punctuation">\\</span>Presenters</span>\n */</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">UserPresenter</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">\\</span>App<span class="token punctuation">\\</span>User</span> <span class="token parameter">$user</span>\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">string</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">showEmail</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">is_hidden</span> <span class="token operator">==</span> <span class="token string single-quoted-string">&#39;F&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;&lt;h2&gt;&#39;</span> <span class="token operator">.</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">email</span> <span class="token string single-quoted-string">&#39;&lt;/h2&gt;&#39;</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>将 <code>@if() .. @endif</code> 的 boolean 判断封装在 Presenter 内，改由 Presenter 负责输出 HTML。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ config(<span class="token punctuation">&#39;</span>app.locale<span class="token punctuation">&#39;</span>) }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Users<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-center position-ref full-height<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    @inject(&#39;userPresenter&#39;,&#39;App\\Presenters\\UserPresenter&#39;)\n    @foreach($users as $user)\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{ $user-&gt;name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n    {!! $userPresenter-&gt;showEmail($user) !!}\n    @endforeach\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>使用 <code>@inject()</code> 注入 <code>UserPresenter</code>，让 View 也可以如 Controller 一样使用注入的物件。</p><p><code>{!! !!}</code> 会保留原来的 HTML 格式。</p><p>将来无论显示逻辑怎么修改，都不用改到 Blade ，直接在 Presenter 内修改。</p><p>改用这种写法，有几个优点：</p><ul><li><p><code>是否显示某些资料</code> 的显示逻辑改为在 Presenter，解决写在 Blade 不容易维护的问题</p></li><li><p>可对显示逻辑做重构与物件导向</p></li></ul><h3 id="依需求显示不同格式" tabindex="-1"><a class="header-anchor" href="#依需求显示不同格式" aria-hidden="true">#</a> 依需求显示不同格式</h3><p>如 <code>按照不同的语系，显示不同的日期格式</code>，我们常常会直接用 Blade 写在 View 里。 如下：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ config(<span class="token punctuation">&#39;</span>app.locale<span class="token punctuation">&#39;</span>) }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Users<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-center position-ref full-height<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    @foreach($users as $user)\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n            @if(App::getLocale() == &#39;uk&#39;)\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{ $user-&gt;created_at-&gt;format(&#39;d M, Y&#39;) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n            @elseif(App::getLocale() == &#39;tw&#39;)\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{ $user-&gt;creaetd_at-&gt;format(&#39;Y/m/d&#39;) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n            @else\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{ $user-&gt;created_at-&gt;formate(&#39;M d, Y&#39;) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n            @endif\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    @endforeach\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在中大型的醒目中，会有几个问题：</p><ul><li><p>由于 Blade 与 HTML 夹杂，不太适合写太复杂的代码，只适合做一些简单的 binding，否则很容易写成传统的 PHP 的意大利面代码</p></li><li><p>无法对显示逻辑做重构与物件导向</p></li></ul><p>比较好的方式是使用 Presenter，具体步骤如下：</p><ul><li><p>将相依无间注入到 Presenter</p></li><li><p>在 presenter 内写不同的日期格式转换逻辑</p></li><li><p>将 Presenter 注入到 View</p></li></ul><h4 id="定义接口" tabindex="-1"><a class="header-anchor" href="#定义接口" aria-hidden="true">#</a> 定义接口</h4><p>定义接口代码 <code>app\\Presenters\\DataFormatPresenterInterface.php</code> ，具体代码如下：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Presenters</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Carbon<span class="token punctuation">\\</span>Carbon</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Interface DateFormatPresenterInterface\n *\n * <span class="token keyword">@package</span> <span class="token class-name">App<span class="token punctuation">\\</span>Presenters</span>\n */</span>\n<span class="token keyword">interface</span> <span class="token class-name-definition class-name">DateFormatPresenterInterface</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * 显示日期格式\n     *\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">\\</span>Carbon<span class="token punctuation">\\</span>Carbon</span> <span class="token parameter">$data</span>\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">string</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">showDateFormat</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Carbon</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>定义了 <code>showDateFormat()</code>，各语言必须在 <code>showDateFormat()</code> 使用 Carbon 的 <code>format()</code> 去转换日期格式。</p><h4 id="一些presenter" tabindex="-1"><a class="header-anchor" href="#一些presenter" aria-hidden="true">#</a> 一些Presenter</h4><p><code>app\\Presenters\\DateFormatPresenterTW.php</code>，具体代码内容如下：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Presenters</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Carbon<span class="token punctuation">\\</span>Carbon</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Class DateFormatPresenterTw\n *\n * <span class="token keyword">@package</span> <span class="token class-name"><span class="token punctuation">\\</span>App<span class="token punctuation">\\</span>Presenters</span>\n */</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">DateFormatPresenterTw</span> <span class="token keyword">implements</span> <span class="token class-name">DateFormatPresenterInterface</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">\\</span>Carbon<span class="token punctuation">\\</span>Carbon</span> <span class="token parameter">$date</span>\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">string</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">showDateFormat</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Carbon</span> <span class="token variable">$date</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token variable">$date</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y/m/d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><code>app\\Presenters\\DateFormatPresenterUk.php</code>，具体代码内容如下：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Presenters</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Carbon<span class="token punctuation">\\</span>Carbon</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Class DateFormatPresenterUk\n *\n * <span class="token keyword">@package</span> <span class="token class-name"><span class="token punctuation">\\</span>App<span class="token punctuation">\\</span>Presenters</span>\n */</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">DateFormatPresenterUk</span> <span class="token keyword">implements</span> <span class="token class-name">DateFormatPresenterInterface</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">\\</span>Carbon<span class="token punctuation">\\</span>Carbon</span> <span class="token parameter">$data</span>\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">string</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">showDateFormat</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Carbon</span> <span class="token variable">$data</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;d M, Y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><code>app\\Presenters\\DateFormatPresenterUs.php</code>，具体代码内容如下：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Presenters</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Carbon<span class="token punctuation">\\</span>Carbon</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Class DateFormatPresenterUs\n *\n * <span class="token keyword">@package</span> <span class="token class-name"><span class="token punctuation">\\</span>App<span class="token punctuation">\\</span>Presenters</span>\n */</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">DateFormatPresenterUs</span> <span class="token keyword">implements</span> <span class="token class-name">DateFormatPresenterInterface</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">\\</span>Carbon<span class="token punctuation">\\</span>Carbon</span> <span class="token parameter">$date</span>\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">string</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">showDateFormat</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Carbon</span> <span class="token variable">$date</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token variable">$date</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;M d,Y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>以上类都实现了 <code>DateFormatPresenterInterface</code> 接口，并将转换成相对应国家日期格式的 Carbon 的 <code>format()</code> 写在 <code>showDateFormat()</code> 内。</p><h4 id="presenter-工厂" tabindex="-1"><a class="header-anchor" href="#presenter-工厂" aria-hidden="true">#</a> Presenter 工厂</h4><p>由于每个语言的日期格式都是一个 presenter 物件，那势必遇到一个最基本的问题： <code>我们必须根据不同的语言去实例化不同的 Presenter 物件</code>，我们可能会在 Controller 中去 实例化。如下：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span> <span class="token parameter">$request</span>\n *\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">int</span></span>\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token variable">$locate</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;hk&#39;</span><span class="token punctuation">;</span>\n   <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$locate</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n       <span class="token keyword">case</span> <span class="token string single-quoted-string">&#39;uk&#39;</span><span class="token punctuation">:</span>\n           <span class="token variable">$presenter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateFormatPresenterUk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n           <span class="token keyword">break</span><span class="token punctuation">;</span>\n       <span class="token keyword">case</span> <span class="token string single-quoted-string">&#39;tw&#39;</span><span class="token punctuation">:</span>\n           <span class="token variable">$presenter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateFormatPresenterTw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n           <span class="token keyword">break</span><span class="token punctuation">;</span>\n       <span class="token keyword">default</span><span class="token punctuation">:</span>\n           <span class="token variable">$presenter</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateFormatPresenterUs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n   <span class="token keyword">return</span> <span class="token variable">$presenter</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>这种写法虽然可行，但是有如下问题：</p><ul><li><p>违反了 SOLID 的开放封闭原则：若将来有新的语言需求，只能不断去修改 <code>index()</code> ，然后不断的新增 <code>elseif()</code> ，计算改用 <code>switch{ .. }</code> 也是一样</p></li><li><p>违反了 SOLID 的依赖反转原则：Controller 直接根据语言去实例化对应的 Class ，高层直接相依于底层，直接将实例化对象写死在代码里</p></li><li><p>无法单元测试：由于 Presenter 直接 New 在 Controller ，因此要测试时，无法对 Presenter 做 mock</p></li></ul><h5 id="定义工厂" tabindex="-1"><a class="header-anchor" href="#定义工厂" aria-hidden="true">#</a> 定义工厂</h5><p>比较好的解决方式是使用 <strong>Factory Pattern</strong></p><p><code>app/Presenters/DateFormatPresenterFactory.php</code> 内容如下：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Presenters</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Class DateFormatPresenterFactory\n *\n * <span class="token keyword">@package</span> <span class="token class-name"><span class="token punctuation">\\</span>App<span class="token punctuation">\\</span>Presenters</span>\n */</span>\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">DateFormatPresenterFactory</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * <span class="token keyword">@param</span> <span class="token parameter">$locale</span>\n     *\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Foundation<span class="token punctuation">\\</span>Application<span class="token punctuation">|</span><span class="token keyword">mixed</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">bind</span><span class="token punctuation">(</span><span class="token variable">$locale</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token class-name static-context">DateFormatPresenterInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;App\\Presenters\\DateFormatPresenter&#39;</span> <span class="token operator">.</span> <span class="token function">ucwords</span><span class="token punctuation">(</span><span class="token variable">$locale</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>使用 <strong>Presenter Factory</strong> 的 <code>create()</code> 去取代 new 建立物件。</p><p>这里当然可以在 <code>create()</code> 里去写 <code>if () { ... } else { ... }</code> 去建立 Presenter 物件，不过这样会违反 SOLID 的开放封闭原则，比较好的方式是改用 <code>App::bind()</code> ，直接根据 <code>$locale</code> 去 binding 相对应的 Class，这样无论再怎么新增语言与日期格式， Controller 与 Presenter Factory 都不用做任何修改，完全符合开放封闭原则。</p><h5 id="控制器调用" tabindex="-1"><a class="header-anchor" href="#控制器调用" aria-hidden="true">#</a> 控制器调用</h5><p><code>app\\Http\\Controllers\\UserController.php</code> 中的内容，如下：</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">DateFormatPresenterFactory</span> <span class="token variable">$dataFormatPresenterFactory</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token variable">$locate</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;uk&#39;</span><span class="token punctuation">;</span>\n    <span class="token variable">$presenter</span> <span class="token operator">=</span> <span class="token variable">$dataFormatPresenterFactory</span><span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token variable">$locate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">dd</span><span class="token punctuation">(</span><span class="token variable">$presenter</span><span class="token operator">-&gt;</span><span class="token function">showDateFormat</span><span class="token punctuation">(</span><span class="token class-name static-context">Carbon</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token variable">$presenter</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>使用 <code>$dataFormatPresenterFactory::bind()</code> 切换 <code>app()</code> 的 Presenter 物件，如此 Controller 将开放封闭，将来有新的语言新增或者修改需求，也不用修改 Controller</p><h5 id="blade-调用" tabindex="-1"><a class="header-anchor" href="#blade-调用" aria-hidden="true">#</a> Blade 调用</h5><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{{ config(<span class="token punctuation">&#39;</span>app.locale<span class="token punctuation">&#39;</span>) }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Users<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-center position-ref full-height<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    @inject(&#39;dateFormatPresenter&#39;,&#39;App\\Presenters\\DateFormatPresenterInterface&#39;)\n    @foreach($users as $user)\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token prolog">&lt;?php print_r($dateFormatPresenter-&gt;showDateFormat($user-&gt;created_at)); ?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    @endforeach\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>使用 <code>@inject()</code> 注入 Presenter ,让 View 也可以如 Controller 一样使用注入的物件</p><p>使用 Presenter 的 <code>showDateFormate()</code> 将日期转换成预计的格式</p><p>使用这种写法有几个优点</p><ul><li><p>将 <code>依需求显示不同的格式</code> 的显示逻辑写在 Presenter ，解决写在 Blade 不容易维护的问题</p></li><li><p>可对显示逻辑做重构与物件导向</p></li><li><p>符合 SOLID 的开放闭合原则：将来若有新的语言，对于拓展是开放的，只要新增 Class 实现 <code>DateFormatPresenterInterface</code> 接口即可；对于修改是封闭的， Controller、FactoryInterface、Factory 与 View 都不用做任何修改</p></li><li><p>不单只有 PHP 可以使用 Service Container，连 Blade 也可以使用 Service Container，甚至搭配 Service Provider</p></li><li><p>可单独对 Presenter 的显示逻辑做单元测试</p></li><li><p>若使用了 Presenter 辅助 Blade ，在搭配 <code>@inject()</code> 注入到 View，View就会非常干净，可专心处理 <code>将资料binding到HTML</code>的职责</p></li><li><p>将来只有 Layout 改变才会动到 Blade ，若是显示逻辑改变都是修改 Presenter</p></li></ul><h3 id="最后" tabindex="-1"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h3><p>Presenter 使得显示逻辑从Blade 中解放，不仅更容易维护、更容易扩展、更容易重复使用且更容易测试</p>',83),e={render:function(n,s){return p}}}}]);