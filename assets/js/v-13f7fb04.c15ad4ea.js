(self.webpackChunklaravel_study=self.webpackChunklaravel_study||[]).push([[6513],{603:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-13f7fb04",path:"/collections/containsStrict.html",title:"containsStrict",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"collections/containsStrict.md",git:{updatedTime:1617071363e3,contributors:[]}}},5012:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>i});var t=a(6252);const p=(0,t.Wm)("h1",{id:"containsstrict"},[(0,t.Wm)("a",{class:"header-anchor",href:"#containsstrict"},"#"),(0,t.Uk)(" containsStrict")],-1),e=(0,t.Uk)("此方法和 "),c=(0,t.Uk)("contains"),o=(0,t.Uk)(" 方法类似，但是它却是使用了「严格」来比较所有值。"),l=(0,t.uE)('<p>基本使用</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$collection</span> <span class="token operator">=</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;product&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Desk&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;price&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;product&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Chair&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;price&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token variable">$collection</span><span class="token operator">-&gt;</span><span class="token function">containsStrict</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;price&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// output</span>\n<span class="token doc-comment comment">/**\n=&gt; false\n */</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如上例所示，集合中对应的值存在，但是值类型不一致也返回 <code>false</code>。</p>',3),i={render:function(n,s){const a=(0,t.up)("RouterLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[p,(0,t.Wm)("p",null,[e,(0,t.Wm)(a,{to:"/collections/contains.html"},{default:(0,t.w5)((()=>[c])),_:1}),o]),l],64)}}}}]);