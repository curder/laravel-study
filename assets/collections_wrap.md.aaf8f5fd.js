import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.16715cb7.js";const h=JSON.parse('{"title":"wrap","description":"","frontmatter":{},"headers":[],"relativePath":"collections/wrap.md","filePath":"collections/wrap.md","lastUpdated":1697187018000}'),o={name:"collections/wrap.md"},p=l(`<h1 id="wrap" tabindex="-1">wrap <a class="header-anchor" href="#wrap" aria-label="Permalink to &quot;wrap&quot;">​</a></h1><blockquote><p>静态 wrap 方法可以将给定值包装在集合中</p></blockquote><div class="language-php vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">]); </span><span style="color:#6A737D;">// [&quot;string&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// [&quot;string&quot;]     </span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">-&gt;</span><span style="color:#B392F0;">wrap</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;string&#39;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// [&quot;string&quot;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">]); </span><span style="color:#6A737D;">// [&quot;string&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [&quot;string&quot;]     </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">-&gt;</span><span style="color:#6F42C1;">wrap</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;string&#39;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// [&quot;string&quot;]</span></span></code></pre></div><h2 id="相关方法" tabindex="-1">相关方法 <a class="header-anchor" href="#相关方法" aria-label="Permalink to &quot;相关方法&quot;">​</a></h2><ul><li><a href="./unwrap.html">unwrap</a></li></ul>`,5),t=[p];function e(c,r,i,y,E,d){return a(),n("div",null,t)}const _=s(o,[["render",e]]);export{h as __pageData,_ as default};
